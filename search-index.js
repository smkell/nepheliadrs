var searchIndex = {};
searchIndex['nepheliad'] = {"items":[[5,"rust_main","nepheliad","The main entry point for the kernel.",null,{"inputs":[{"name":"usize"}],"output":null}],[0,"vga_buffer","","Provides a Rust interface for writing to the VGA buffer.",null,null],[3,"Writer","nepheliad::vga_buffer","An object which writes to the VGA buffer.",null,null],[4,"Color","","Represents the colors available in text mode.",null,null],[13,"Black","","",0,null],[13,"Blue","","",0,null],[13,"Green","","",0,null],[13,"Cyan","","",0,null],[13,"Red","","",0,null],[13,"Magenta","","",0,null],[13,"Brown","","",0,null],[13,"LightGray","","",0,null],[13,"DarkGray","","",0,null],[13,"LightBlue","","",0,null],[13,"LightGreen","","",0,null],[13,"LightCyan","","",0,null],[13,"LightRed","","",0,null],[13,"Pink","","",0,null],[13,"Yellow","","",0,null],[13,"White","","",0,null],[5,"clear_screen","","Clears the background.",null,{"inputs":[],"output":null}],[7,"WRITER","","The primary VGA writer.",null,null],[11,"write_byte","","Writes a byte to the VGA buffer.",1,{"inputs":[{"name":"writer"},{"name":"u8"}],"output":null}],[11,"write_str","","",1,{"inputs":[{"name":"writer"},{"name":"str"}],"output":{"name":"result"}}],[0,"memory","nepheliad","Defines an interface for memory management.",null,null],[3,"Frame","nepheliad::memory","Represents a physical memory frame.",null,null],[0,"paging","","Defines the interface and types for memory paging.",null,null],[3,"Entry","nepheliad::memory::paging","Represents an entry in the page table.",null,null],[3,"EntryFlags","","The flags used to indicate the entry's state and contents.",null,null],[3,"Page","","Represents a page of virtual memory.",null,null],[3,"RecusivePageTable","","Represents a handle for the recursive page table hierarchy.",null,null],[5,"test_paging","","Tests the paging Module.",null,{"inputs":[{"name":"a"}],"output":null}],[11,"is_unused","","Determines whether the entry is currently being used.",2,{"inputs":[{"name":"entry"}],"output":{"name":"bool"}}],[11,"set_unused","","Sets an entry to be unusued.",2,{"inputs":[{"name":"entry"}],"output":null}],[11,"flags","","Retrieves the entry's flags.",2,{"inputs":[{"name":"entry"}],"output":{"name":"entryflags"}}],[11,"pointed_frame","","Retrieves the `Frame` the entry points to.",2,{"inputs":[{"name":"entry"}],"output":{"name":"option"}}],[11,"set","","Sets the entry's flags for a particular `Frame`.",2,{"inputs":[{"name":"entry"},{"name":"frame"},{"name":"entryflags"}],"output":null}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"entryflags"}],"output":{"name":"entryflags"}}],[11,"eq","","",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"entryflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",3,{"inputs":[{"name":"entryflags"}],"output":{"name":"entryflags"}}],[11,"all","","Returns the set containing all flags.",3,{"inputs":[{"name":"entryflags"}],"output":{"name":"entryflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",3,{"inputs":[{"name":"entryflags"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",3,{"inputs":[{"name":"entryflags"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",3,{"inputs":[{"name":"entryflags"},{"name":"u64"}],"output":{"name":"entryflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",3,{"inputs":[{"name":"entryflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",3,{"inputs":[{"name":"entryflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":{"name":"entryflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":{"name":"entryflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":{"name":"entryflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",3,{"inputs":[{"name":"entryflags"},{"name":"entryflags"}],"output":{"name":"entryflags"}}],[11,"not","","Returns the complement of this set of flags.",3,{"inputs":[{"name":"entryflags"}],"output":{"name":"entryflags"}}],[11,"from_iter","","",3,{"inputs":[{"name":"entryflags"},{"name":"t"}],"output":{"name":"entryflags"}}],[6,"PhysicalAddress","","Represents a physical memory address.",null,null],[6,"VirtualAddress","","Represents a virtual memory address.",null,null],[17,"PRESENT","","Indicates the page this entry maps to is in memory.",null,null],[17,"WRITEABLE","","Indicates that this page is writable.",null,null],[17,"USER_ACCESSIBLE","","Indicates that user-mode processes can access this page.",null,null],[17,"WRITE_THROUGH","","Indicates that writes should go directly to memory,\nbypassing the cache.",null,null],[17,"NO_CACHE","","Indicates that no cache (read or write) should be used for\nthis page.",null,null],[17,"ACCESSED","","Set by the CPU when the page is accessed.",null,null],[17,"DIRTY","","Set by the CPU when a write to this page occurs.",null,null],[17,"HUGE_PAGE","","Indicates that this is a huge page.",null,null],[17,"GLOBAL","","Indicates that this page is not flushed from cache on\naddress space switch.",null,null],[17,"NO_EXECUTE","","Indicates that code cannot be executed from this page.",null,null],[11,"new","","Constructs a handle for the recursive page table hierarchy.",4,{"inputs":[{"name":"recusivepagetable"}],"output":{"name":"recusivepagetable"}}],[11,"translate","","Translates a virtual page address to the actual physical address.",4,{"inputs":[{"name":"recusivepagetable"},{"name":"virtualaddress"}],"output":{"name":"option"}}],[11,"map_to","","Maps a virtual memory page to a particular physical memory frame.",4,{"inputs":[{"name":"recusivepagetable"},{"name":"page"},{"name":"frame"},{"name":"entryflags"},{"name":"a"}],"output":null}],[11,"map","","Maps a virtual memory page to a physical memory frame.",4,{"inputs":[{"name":"recusivepagetable"},{"name":"page"},{"name":"entryflags"},{"name":"a"}],"output":null}],[11,"identity_map","","Remaps a particular frame to the associated page.",4,{"inputs":[{"name":"recusivepagetable"},{"name":"frame"},{"name":"entryflags"},{"name":"a"}],"output":null}],[0,"area_frame_allocator","nepheliad::memory","Implements a `FrameAllocator` which uses the Multiboot2 memory map to track\navailable memory frames.",null,null],[3,"AreaFrameAllocator","nepheliad::memory::area_frame_allocator","Represents an allocator which uses the Mulitboot2 memory map to tack\navailable memory areas.",null,null],[11,"allocate_frame","","",5,{"inputs":[{"name":"areaframeallocator"}],"output":{"name":"option"}}],[11,"deallocate_frame","","",5,{"inputs":[{"name":"areaframeallocator"},{"name":"frame"}],"output":null}],[11,"new","","Constructs a new `AreaFrameAllocator`.",5,{"inputs":[{"name":"areaframeallocator"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"memoryareaiter"}],"output":{"name":"areaframeallocator"}}],[17,"PAGE_SIZE","nepheliad::memory","The size, in bytes, of a virtual memory page.",null,null],[8,"FrameAllocator","","The trait defining the interface for an object which allocates `Frame`s.",null,null],[10,"allocate_frame","","Allocates the next frame.",6,{"inputs":[{"name":"frameallocator"}],"output":{"name":"option"}}],[10,"deallocate_frame","","Deallocates the given `Frame`.",6,{"inputs":[{"name":"frameallocator"},{"name":"frame"}],"output":null}],[11,"cmp","","",7,{"inputs":[{"name":"frame"},{"name":"frame"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"frame"},{"name":"frame"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"frame"},{"name":"frame"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"frame"},{"name":"frame"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"frame"},{"name":"frame"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"frame"},{"name":"frame"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"frame"},{"name":"frame"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"frame"},{"name":"frame"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"frame"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Color"],[3,"Writer"],[3,"Entry"],[3,"EntryFlags"],[3,"RecusivePageTable"],[3,"AreaFrameAllocator"],[8,"FrameAllocator"],[3,"Frame"]]};
searchIndex['multiboot2'] = {"items":[[3,"ElfSectionsTag","multiboot2","",null,null],[12,"number_of_sections","","",0,null],[3,"ElfSection","","",null,null],[12,"flags","","",1,null],[12,"addr","","",1,null],[12,"size","","",1,null],[3,"ElfSectionIter","","",null,null],[3,"MemoryMapTag","","",null,null],[3,"MemoryArea","","",null,null],[12,"base_addr","","",2,null],[12,"length","","",2,null],[3,"MemoryAreaIter","","",null,null],[3,"BootInformation","","",null,null],[12,"total_size","","",3,null],[4,"ElfSectionType","","",null,null],[13,"Unused","","",4,null],[13,"ProgramSection","","",4,null],[13,"LinkerSymbolTable","","",4,null],[13,"StringTable","","",4,null],[13,"RelaRelocation","","",4,null],[13,"SymbolHashTable","","",4,null],[13,"DynamicLinkingTable","","",4,null],[13,"Note","","",4,null],[13,"Uninitialized","","",4,null],[13,"RelRelocation","","",4,null],[13,"Reserved","","",4,null],[13,"DynamicLoaderSymbolTable","","",4,null],[4,"ElfSectionFlags","","",null,null],[13,"Writable","","",5,null],[13,"Allocated","","",5,null],[13,"Executable","","",5,null],[5,"load","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"bootinformation"}}],[11,"fmt","","",0,{"inputs":[{"name":"elfsectionstag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sections","","",0,{"inputs":[{"name":"elfsectionstag"}],"output":{"name":"elfsectioniter"}}],[11,"clone","","",6,{"inputs":[{"name":"elfsectioniter"}],"output":{"name":"elfsectioniter"}}],[11,"next","","",6,{"inputs":[{"name":"elfsectioniter"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"elfsection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"memory_areas","","",7,{"inputs":[{"name":"memorymaptag"}],"output":{"name":"memoryareaiter"}}],[11,"clone","","",8,{"inputs":[{"name":"memoryareaiter"}],"output":{"name":"memoryareaiter"}}],[11,"next","","",8,{"inputs":[{"name":"memoryareaiter"}],"output":{"name":"option"}}],[11,"elf_sections_tag","","",3,{"inputs":[{"name":"bootinformation"}],"output":{"name":"option"}}],[11,"memory_map_tag","","",3,{"inputs":[{"name":"bootinformation"}],"output":{"name":"option"}}]],"paths":[[3,"ElfSectionsTag"],[3,"ElfSection"],[3,"MemoryArea"],[3,"BootInformation"],[4,"ElfSectionType"],[4,"ElfSectionFlags"],[3,"ElfSectionIter"],[3,"MemoryMapTag"],[3,"MemoryAreaIter"]]};
searchIndex['x86'] = {"items":[[11,"write_char","x86::std::fmt","Writes a `char` into this writer, returning whether the write succeeded.",0,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",0,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[0,"io","x86","I/O port functionality.",null,null],[5,"outb","x86::io","Write 8 bits to port",null,{"inputs":[{"name":"u16"},{"name":"u8"}],"output":null}],[5,"inb","","Read 8 bits from port",null,{"inputs":[{"name":"u16"}],"output":{"name":"u8"}}],[5,"outw","","Write 16 bits to port",null,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":null}],[5,"inw","","Read 16 bits from port",null,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[5,"outl","","Write 32 bits to port",null,{"inputs":[{"name":"u16"},{"name":"u32"}],"output":null}],[5,"inl","","Read 32 bits from port",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[0,"controlregs","x86","Functions to read and write control registers.",null,null],[5,"cr0","x86::controlregs","",null,{"inputs":[],"output":{"name":"u64"}}],[5,"cr0_write","","Write cr0.",null,{"inputs":[{"name":"u64"}],"output":null}],[5,"cr2","","Contains page-fault linear address.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"cr3","","Contains page-table root pointer.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"cr3_write","","Switch page-table PML4 pointer.",null,{"inputs":[{"name":"u64"}],"output":null}],[5,"cr4","","Contains various flags to control operations in protected mode.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"cr4_write","","Write cr4.",null,{"inputs":[{"name":"u64"}],"output":null}],[0,"msr","x86","MSR value list and function to read and write them.",null,null],[5,"wrmsr","x86::msr","Write 64 bits to msr register.",null,{"inputs":[{"name":"u32"},{"name":"u64"}],"output":null}],[5,"rdmsr","","Read 64 bits msr register.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[17,"P5_MC_ADDR","","See Section 35.16, MSRs in Pentium Processors,  and see  Table 35-2.",null,null],[17,"IA32_P5_MC_ADDR","","See Section 35.16, MSRs in Pentium Processors.",null,null],[17,"P5_MC_TYPE","","See Section 35.16, MSRs in Pentium Processors,  and see  Table 35-2.",null,null],[17,"IA32_P5_MC_TYPE","","See Section 35.16, MSRs in Pentium Processors.",null,null],[17,"IA32_MONITOR_FILTER_SIZE","","See Section 8.10.5, Monitor/Mwait Address Range Determination,   and see Table 35-2.",null,null],[17,"IA32_MONITOR_FILTER_LINE_SIZE","","See Section 8.10.5, Monitor/Mwait Address  Range Determination.",null,null],[17,"IA32_TIME_STAMP_COUNTER","","See Section 17.13, Time-Stamp Counter,  and see Table 35-2.",null,null],[17,"TSC","","See Section 17.13, Time-Stamp Counter.",null,null],[17,"MSR_PLATFORM_ID","","Model Specific Platform ID (R)",null,null],[17,"IA32_PLATFORM_ID","","Platform ID (R)  See Table 35-2. The operating system can use this MSR to  determine slot  information for the processor and the proper microcode update to load.",null,null],[17,"APIC_BASE","","Section 10.4.4, Local APIC Status and Location.",null,null],[17,"IA32_APIC_BASE","","APIC Location and Status (R/W) See Table 35-2. See Section 10.4.4, Local APIC  Status and Location.",null,null],[17,"EBL_CR_POWERON","","Processor Hard Power-On Configuration  (R/W) Enables and disables processor features;  (R) indicates current processor configuration.",null,null],[17,"MSR_EBL_CR_POWERON","","Processor Hard Power-On Configuration (R/W) Enables and  disables processor features;  (R) indicates current processor configuration.",null,null],[17,"MSR_EBC_HARD_POWERON","","Processor Hard Power-On Configuration (R/W) Enables and disables processor features;  (R) indicates current processor configuration.",null,null],[17,"MSR_EBC_SOFT_POWERON","","Processor Soft Power-On Configuration (R/W)  Enables and disables processor features.",null,null],[17,"MSR_EBC_FREQUENCY_ID","","Processor Frequency Configuration The bit field layout of this MSR varies according to  the MODEL value in the CPUID version  information. The following bit field layout applies to Pentium 4 and Xeon Processors with MODEL  encoding equal or greater than 2.  (R) The field Indicates the current processor  frequency configuration.",null,null],[17,"TEST_CTL","","Test Control Register",null,null],[17,"MSR_SMI_COUNT","","SMI Counter (R/O)",null,null],[17,"IA32_FEATURE_CONTROL","","Control Features in IA-32 Processor (R/W) See Table 35-2 (If CPUID.01H:ECX.[bit 5])",null,null],[17,"IA32_TSC_ADJUST","","Per-Logical-Processor TSC ADJUST (R/W) See Table 35-2.",null,null],[17,"MSR_LASTBRANCH_0_FROM_IP","","Last Branch Record 0 From IP (R/W) One of eight pairs of last branch record registers on the last branch  record stack. This part of the stack contains pointers to the source  instruction for one of the last eight branches, exceptions, or  interrupts taken by the processor. See also: Last Branch Record Stack TOS at 1C9H Section 17.11, Last Branch, Interrupt, and Exception Recording  (Pentium M Processors).",null,null],[17,"MSR_LASTBRANCH_1","","Last Branch Record 1 (R/W) See description of MSR_LASTBRANCH_0.",null,null],[17,"MSR_LASTBRANCH_1_FROM_IP","","Last Branch Record 1 From IP (R/W) See description of MSR_LASTBRANCH_0_FROM_IP.",null,null],[17,"MSR_LASTBRANCH_2_FROM_IP","","Last Branch Record 2 From IP (R/W) See description of MSR_LASTBRANCH_0_FROM_IP.",null,null],[17,"MSR_LASTBRANCH_3_FROM_IP","","Last Branch Record 3 From IP (R/W) See description of MSR_LASTBRANCH_0_FROM_IP.",null,null],[17,"MSR_LASTBRANCH_4","","Last Branch Record 4 (R/W) See description of MSR_LASTBRANCH_0.",null,null],[17,"MSR_LASTBRANCH_4_FROM_IP","","Last Branch Record 4 From IP (R/W) See description of MSR_LASTBRANCH_0_FROM_IP.",null,null],[17,"MSR_LASTBRANCH_5","","Last Branch Record 5 (R/W) See description of MSR_LASTBRANCH_0.",null,null],[17,"MSR_LASTBRANCH_5_FROM_IP","","Last Branch Record 5 From IP (R/W) See description of MSR_LASTBRANCH_0_FROM_IP.",null,null],[17,"MSR_LASTBRANCH_6","","Last Branch Record 6 (R/W) See description of MSR_LASTBRANCH_0.",null,null],[17,"MSR_LASTBRANCH_6_FROM_IP","","Last Branch Record 6 From IP (R/W) See description of MSR_LASTBRANCH_0_FROM_IP.",null,null],[17,"MSR_LASTBRANCH_7","","Last Branch Record 7 (R/W) See description of MSR_LASTBRANCH_0.",null,null],[17,"MSR_LASTBRANCH_7_FROM_IP","","Last Branch Record 7 From IP (R/W) See description of MSR_LASTBRANCH_0_FROM_IP.",null,null],[17,"MSR_LASTBRANCH_0_TO_IP","","Last Branch Record 0 (R/W)  One of 16 pairs of last branch record registers on  the last branch record stack (6C0H-6CFH). This  part of the stack contains pointers to the  destination instruction for one of the last 16  branches, exceptions, or interrupts that the  processor took. See Section 17.9, Last Branch, Interrupt, and  Exception Recording (Processors based on Intel  NetBurst® Microarchitecture).",null,null],[17,"MSR_LASTBRANCH_1_TO_IP","","Last Branch Record 1 To IP (R/W) See description of MSR_LASTBRANCH_0_TO_IP.",null,null],[17,"MSR_LASTBRANCH_2_TO_IP","","Last Branch Record 2 To IP (R/W) See description of MSR_LASTBRANCH_0_TO_IP.",null,null],[17,"MSR_LASTBRANCH_3_TO_IP","","Last Branch Record 3 To IP (R/W) See description of MSR_LASTBRANCH_0_TO_IP.",null,null],[17,"MSR_LASTBRANCH_4_TO_IP","","Last Branch Record 4 To IP (R/W) See description of MSR_LASTBRANCH_0_TO_IP.",null,null],[17,"MSR_LASTBRANCH_5_TO_IP","","Last Branch Record 5 To IP (R/W) See description of MSR_LASTBRANCH_0_TO_IP.",null,null],[17,"MSR_LASTBRANCH_6_TO_IP","","Last Branch Record 6 To IP (R/W) See description of MSR_LASTBRANCH_0_TO_IP.",null,null],[17,"MSR_LASTBRANCH_7_TO_IP","","Last Branch Record 7 To IP (R/W) See description of MSR_LASTBRANCH_0_TO_IP.",null,null],[17,"IA32_BIOS_UPDT_TRIG","","BIOS Update Trigger Register (W)  See Table 35-2.",null,null],[17,"BIOS_UPDT_TRIG","","BIOS Update Trigger Register.",null,null],[17,"IA32_BIOS_SIGN_ID","","BIOS Update Signature ID (R/W) See Table 35-2.",null,null],[17,"IA32_SMM_MONITOR_CTL","","SMM Monitor Configuration (R/W) See Table 35-2.",null,null],[17,"IA32_SMBASE","","If IA32_VMX_MISC[bit 15])",null,null],[17,"MSR_SMRR_PHYSMASK","","System Management Mode Physical Address Mask register  (WO in SMM) Model-specific implementation of SMRR-like interface, read visible  and write only in SMM..",null,null],[17,"IA32_PMC0","","Performance Counter Register  See Table 35-2.",null,null],[17,"IA32_PMC1","","Performance Counter Register  See Table 35-2.",null,null],[17,"IA32_PMC2","","Performance Counter Register  See Table 35-2.",null,null],[17,"IA32_PMC3","","Performance Counter Register  See Table 35-2.",null,null],[17,"IA32_PMC4","","Performance Counter Register  See Table 35-2.",null,null],[17,"IA32_PMC5","","Performance Counter Register  See Table 35-2.",null,null],[17,"IA32_PMC6","","Performance Counter Register  See Table 35-2.",null,null],[17,"IA32_PMC7","","Performance Counter Register  See Table 35-2.",null,null],[17,"MSR_FSB_FREQ","","Scaleable Bus Speed(RO) This field indicates the intended scaleable bus clock speed for  processors based on Intel Atom microarchitecture:",null,null],[17,"MSR_PLATFORM_INFO","","see http://biosbits.org.",null,null],[17,"MSR_PKG_CST_CONFIG_CONTROL","","C-State Configuration Control (R/W)  Note: C-state values are processor specific C-state code names,  unrelated to MWAIT extension C-state parameters or ACPI C- States. See http://biosbits.org.",null,null],[17,"MSR_PMG_IO_CAPTURE_BASE","","Power Management IO Redirection in C-state (R/W)  See http://biosbits.org.",null,null],[17,"IA32_MPERF","","Maximum Performance Frequency Clock Count (RW)  See Table 35-2.",null,null],[17,"IA32_APERF","","Actual Performance Frequency Clock Count (RW)  See Table 35-2.",null,null],[17,"IA32_MTRRCAP","","MTRR Information See Section 11.11.1, MTRR Feature  Identification. .",null,null],[17,"MSR_BBL_CR_CTL","","",null,null],[17,"MSR_BBL_CR_CTL3","","",null,null],[17,"IA32_SYSENTER_CS","","CS register target for CPL 0 code (R/W) See Table 35-2. See Section 5.8.7, Performing Fast Calls to  System Procedures with the SYSENTER and  SYSEXIT Instructions.",null,null],[17,"SYSENTER_CS_MSR","","CS register target for CPL 0 code",null,null],[17,"IA32_SYSENTER_ESP","","Stack pointer for CPL 0 stack (R/W) See Table 35-2. See Section 5.8.7, Performing Fast Calls to  System Procedures with the SYSENTER and  SYSEXIT Instructions.",null,null],[17,"SYSENTER_ESP_MSR","","Stack pointer for CPL 0 stack",null,null],[17,"IA32_SYSENTER_EIP","","CPL 0 code entry point (R/W) See Table 35-2. See Section 5.8.7, Performing  Fast Calls to System Procedures with the SYSENTER and SYSEXIT Instructions.",null,null],[17,"SYSENTER_EIP_MSR","","CPL 0 code entry point",null,null],[17,"MCG_CAP","","",null,null],[17,"IA32_MCG_CAP","","Machine Check Capabilities (R) See Table 35-2. See Section 15.3.1.1,  IA32_MCG_CAP MSR.",null,null],[17,"IA32_MCG_STATUS","","Machine Check Status. (R) See Table 35-2. See Section 15.3.1.2,  IA32_MCG_STATUS MSR.",null,null],[17,"MCG_STATUS","","",null,null],[17,"MCG_CTL","","",null,null],[17,"IA32_MCG_CTL","","Machine Check Feature Enable (R/W) See Table 35-2. See Section 15.3.1.3, IA32_MCG_CTL MSR.",null,null],[17,"MSR_SMM_MCA_CAP","","Enhanced SMM Capabilities (SMM-RO) Reports SMM capability Enhancement. Accessible only while in  SMM.",null,null],[17,"MSR_ERROR_CONTROL","","MC Bank Error Configuration (R/W)",null,null],[17,"MSR_MCG_RAX","","Machine Check EAX/RAX Save State See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"MSR_MCG_RBX","","Machine Check EBX/RBX Save State See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"MSR_MCG_RCX","","Machine Check ECX/RCX Save State See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"MSR_MCG_RDX","","Machine Check EDX/RDX Save State See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"MSR_MCG_RSI","","Machine Check ESI/RSI Save State See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"MSR_MCG_RDI","","Machine Check EDI/RDI Save State See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"MSR_MCG_RBP","","Machine Check EBP/RBP Save State See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"IA32_PERFEVTSEL0","","Performance Event Select for Counter 0 (R/W) Supports all fields described inTable 35-2 and the fields below.",null,null],[17,"IA32_PERFEVTSEL1","","Performance Event Select for Counter 1 (R/W) Supports all fields described inTable 35-2 and the fields below.",null,null],[17,"IA32_PERFEVTSEL2","","Performance Event Select for Counter 2 (R/W) Supports all fields described inTable 35-2 and the fields below.",null,null],[17,"MSR_MCG_RFLAGS","","Machine Check EFLAGS/RFLAG Save State See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"IA32_PERFEVTSEL3","","Performance Event Select for Counter 3 (R/W) Supports all fields described inTable 35-2 and the fields below.",null,null],[17,"MSR_MCG_RIP","","Machine Check EIP/RIP Save State See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"MSR_MCG_MISC","","Machine Check Miscellaneous See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"IA32_PERFEVTSEL4","","See Table 35-2; If CPUID.0AH:EAX[15:8] = 8",null,null],[17,"IA32_PERFEVTSEL5","","See Table 35-2; If CPUID.0AH:EAX[15:8] = 8",null,null],[17,"IA32_PERFEVTSEL6","","See Table 35-2; If CPUID.0AH:EAX[15:8] = 8",null,null],[17,"IA32_PERFEVTSEL7","","See Table 35-2; If CPUID.0AH:EAX[15:8] = 8",null,null],[17,"MSR_MCG_R8","","Machine Check R8 See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"MSR_MCG_R9","","Machine Check R9D/R9 See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"MSR_MCG_R10","","Machine Check R10 See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"MSR_MCG_R11","","Machine Check R11 See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"MSR_MCG_R12","","Machine Check R12 See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"MSR_MCG_R13","","Machine Check R13 See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"MSR_MCG_R14","","Machine Check R14 See Section 15.3.2.6, IA32_MCG Extended  Machine Check State MSRs.",null,null],[17,"MSR_PERF_STATUS","","",null,null],[17,"IA32_PERF_STATUS","","See Table 35-2. See Section 14.1, Enhanced Intel  Speedstep® Technology.",null,null],[17,"IA32_PERF_CTL","","See Table 35-2. See Section 14.1, Enhanced Intel  Speedstep® Technology.",null,null],[17,"IA32_CLOCK_MODULATION","","Clock Modulation (R/W)  See Table 35-2. IA32_CLOCK_MODULATION MSR was originally named  IA32_THERM_CONTROL MSR.",null,null],[17,"IA32_THERM_INTERRUPT","","Thermal Interrupt Control (R/W) See Section 14.5.2, Thermal Monitor,  and see Table 35-2.",null,null],[17,"IA32_THERM_STATUS","","Thermal Monitor Status (R/W) See Section 14.5.2, Thermal Monitor,  and see  Table 35-2.",null,null],[17,"MSR_THERM2_CTL","","Thermal Monitor 2 Control.",null,null],[17,"IA32_MISC_ENABLE","","",null,null],[17,"MSR_PLATFORM_BRV","","Platform Feature Requirements (R)",null,null],[17,"MSR_TEMPERATURE_TARGET","","",null,null],[17,"MSR_OFFCORE_RSP_0","","Offcore Response Event Select Register (R/W)",null,null],[17,"MSR_OFFCORE_RSP_1","","Offcore Response Event Select Register (R/W)",null,null],[17,"MSR_MISC_PWR_MGMT","","See http://biosbits.org.",null,null],[17,"MSR_TURBO_POWER_CURRENT_LIMIT","","See http://biosbits.org.",null,null],[17,"MSR_TURBO_RATIO_LIMIT","","Maximum Ratio Limit of Turbo Mode RO if MSR_PLATFORM_INFO.[28] = 0, RW if MSR_PLATFORM_INFO.[28] = 1",null,null],[17,"IA32_ENERGY_PERF_BIAS","","if CPUID.6H:ECX[3] = 1",null,null],[17,"IA32_PACKAGE_THERM_STATUS","","If CPUID.06H: EAX[6] = 1",null,null],[17,"IA32_PACKAGE_THERM_INTERRUPT","","If CPUID.06H: EAX[6] = 1",null,null],[17,"MSR_LBR_SELECT","","Last Branch Record Filtering Select Register (R/W)  See Section 17.6.2, Filtering of Last Branch Records.",null,null],[17,"MSR_LASTBRANCH_TOS","","Last Branch Record Stack TOS (R/W)  Contains an index (0-3 or 0-15) that points to the  top of the last branch record stack (that is, that points the index of the MSR containing the most  recent branch record). See Section 17.9.2, LBR Stack for Processors Based on Intel NetBurst® Microarchitecture ; and  addresses 1DBH-1DEH and 680H-68FH.",null,null],[17,"DEBUGCTLMSR","","",null,null],[17,"MSR_DEBUGCTLA","","Debug Control (R/W)  Controls how several debug features are used. Bit  definitions are discussed in the referenced section. See Section 17.9.1, MSR_DEBUGCTLA MSR.",null,null],[17,"MSR_DEBUGCTLB","","Debug Control (R/W)  Controls how several debug features are used. Bit definitions are discussed in the referenced section. See Section 17.11, Last Branch, Interrupt, and Exception Recording  (Pentium M Processors).",null,null],[17,"IA32_DEBUGCTL","","Debug Control (R/W)  Controls how several debug features are used. Bit definitions are  discussed in the referenced section.",null,null],[17,"LASTBRANCHFROMIP","","",null,null],[17,"MSR_LASTBRANCH_0","","Last Branch Record 0 (R/W)  One of four last branch record registers on the last  branch record stack. It contains pointers to the  source and destination instruction for one of the  last four branches, exceptions, or interrupts that  the processor took. MSR_LASTBRANCH_0 through  MSR_LASTBRANCH_3 at 1DBH-1DEH are  available only on family 0FH, models 0H-02H.  They have been replaced by the MSRs at 680H- 68FH and 6C0H-6CFH.",null,null],[17,"LASTBRANCHTOIP","","",null,null],[17,"LASTINTFROMIP","","",null,null],[17,"MSR_LASTBRANCH_2","","Last Branch Record 2 See description of the MSR_LASTBRANCH_0 MSR at 1DBH.",null,null],[17,"MSR_LER_FROM_LIP","","Last Exception Record From Linear IP (R)  Contains a pointer to the last branch instruction that the processor  executed prior to the last exception that was generated or the last  interrupt that was handled. See Section 17.11, Last Branch, Interrupt, and Exception Recording  (Pentium M Processors)  and Section 17.12.2, Last Branch and Last  Exception MSRs.",null,null],[17,"LASTINTTOIP","","",null,null],[17,"MSR_LASTBRANCH_3","","Last Branch Record 3 See description of the MSR_LASTBRANCH_0 MSR  at 1DBH.",null,null],[17,"MSR_LER_TO_LIP","","Last Exception Record To Linear IP (R)  This area contains a pointer to the target of the last branch instruction  that the processor executed prior to the last exception that was  generated or the last interrupt that was handled. See Section 17.11, Last Branch, Interrupt, and Exception Recording  (Pentium M Processors)  and Section 17.12.2, Last Branch and Last  Exception MSRs.",null,null],[17,"ROB_CR_BKUPTMPDR6","","",null,null],[17,"IA32_SMRR_PHYSBASE","","See Table 35-2.",null,null],[17,"IA32_SMRR_PHYSMASK","","If IA32_MTRR_CAP[SMRR]  = 1",null,null],[17,"IA32_PLATFORM_DCA_CAP","","06_0FH",null,null],[17,"IA32_CPU_DCA_CAP","","",null,null],[17,"IA32_DCA_0_CAP","","06_2EH",null,null],[17,"MSR_POWER_CTL","","Power Control Register. See http://biosbits.org.",null,null],[17,"IA32_MTRR_PHYSBASE0","","Variable Range Base MTRR See Section 11.11.2.3, Variable Range MTRRs.",null,null],[17,"IA32_MTRR_PHYSMASK0","","Variable Range Mask MTRR See Section 11.11.2.3, Variable Range MTRRs.",null,null],[17,"IA32_MTRR_PHYSBASE1","","Variable Range Mask MTRR See Section 11.11.2.3, Variable Range MTRRs.",null,null],[17,"IA32_MTRR_PHYSMASK1","","Variable Range Mask MTRR See Section 11.11.2.3, Variable Range MTRRs.",null,null],[17,"IA32_MTRR_PHYSBASE2","","Variable Range Mask MTRR See Section 11.11.2.3, Variable Range MTRRs.",null,null],[17,"IA32_MTRR_PHYSMASK2","","Variable Range Mask MTRR See Section 11.11.2.3, Variable Range MTRRs .",null,null],[17,"IA32_MTRR_PHYSBASE3","","Variable Range Mask MTRR See Section 11.11.2.3, Variable Range MTRRs.",null,null],[17,"IA32_MTRR_PHYSMASK3","","Variable Range Mask MTRR See Section 11.11.2.3, Variable Range MTRRs.",null,null],[17,"IA32_MTRR_PHYSBASE4","","Variable Range Mask MTRR See Section 11.11.2.3, Variable Range MTRRs.",null,null],[17,"IA32_MTRR_PHYSMASK4","","Variable Range Mask MTRR See Section 11.11.2.3, Variable Range MTRRs.",null,null],[17,"IA32_MTRR_PHYSBASE5","","Variable Range Mask MTRR See Section 11.11.2.3, Variable Range MTRRs.",null,null],[17,"IA32_MTRR_PHYSMASK5","","Variable Range Mask MTRR See Section 11.11.2.3, Variable Range MTRRs.",null,null],[17,"IA32_MTRR_PHYSBASE6","","Variable Range Mask MTRR See Section 11.11.2.3, Variable Range MTRRs.",null,null],[17,"IA32_MTRR_PHYSMASK6","","Variable Range Mask MTRR See Section 11.11.2.3, Variable Range MTRRs.",null,null],[17,"IA32_MTRR_PHYSBASE7","","Variable Range Mask MTRR See Section 11.11.2.3, Variable Range MTRRs.",null,null],[17,"IA32_MTRR_PHYSMASK7","","Variable Range Mask MTRR See Section 11.11.2.3, Variable Range MTRRs.",null,null],[17,"IA32_MTRR_PHYSBASE8","","if IA32_MTRR_CAP[7:0] >  8",null,null],[17,"IA32_MTRR_PHYSMASK8","","if IA32_MTRR_CAP[7:0] >  8",null,null],[17,"IA32_MTRR_PHYSBASE9","","if IA32_MTRR_CAP[7:0] >  9",null,null],[17,"IA32_MTRR_PHYSMASK9","","if IA32_MTRR_CAP[7:0] >  9",null,null],[17,"IA32_MTRR_FIX64K_00000","","Fixed Range MTRR See Section 11.11.2.2, Fixed Range MTRRs.",null,null],[17,"IA32_MTRR_FIX16K_80000","","Fixed Range MTRR See Section 11.11.2.2, Fixed Range MTRRs.",null,null],[17,"IA32_MTRR_FIX16K_A0000","","Fixed Range MTRR See Section 11.11.2.2, Fixed Range MTRRs.",null,null],[17,"IA32_MTRR_FIX4K_C0000","","Fixed Range MTRR See Section 11.11.2.2, Fixed Range MTRRs.",null,null],[17,"IA32_MTRR_FIX4K_C8000","","Fixed Range MTRR See Section 11.11.2.2, Fixed Range MTRRs .",null,null],[17,"IA32_MTRR_FIX4K_D0000","","Fixed Range MTRR See Section 11.11.2.2, Fixed Range MTRRs .",null,null],[17,"IA32_MTRR_FIX4K_D8000","","Fixed Range MTRR See Section 11.11.2.2, Fixed Range MTRRs.",null,null],[17,"IA32_MTRR_FIX4K_E0000","","Fixed Range MTRR See Section 11.11.2.2, Fixed Range MTRRs.",null,null],[17,"IA32_MTRR_FIX4K_E8000","","Fixed Range MTRR See Section 11.11.2.2, Fixed Range MTRRs.",null,null],[17,"IA32_MTRR_FIX4K_F0000","","Fixed Range MTRR See Section 11.11.2.2, Fixed Range MTRRs.",null,null],[17,"IA32_MTRR_FIX4K_F8000","","Fixed Range MTRR See Section 11.11.2.2, Fixed Range MTRRs.",null,null],[17,"IA32_PAT","","Page Attribute Table See Section 11.11.2.2, Fixed Range MTRRs.",null,null],[17,"IA32_MC0_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC1_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC2_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC3_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC4_CTL2","","See Table 35-2.",null,null],[17,"MSR_MC4_CTL2","","Always 0 (CMCI not supported).",null,null],[17,"IA32_MC5_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC6_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC7_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC8_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC9_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC10_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC11_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC12_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC13_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC14_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC15_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC16_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC17_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC18_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC19_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC20_CTL2","","See Table 35-2.",null,null],[17,"IA32_MC21_CTL2","","See Table 35-2.",null,null],[17,"IA32_MTRR_DEF_TYPE","","Default Memory Types (R/W)  Sets the memory type for the regions of physical memory that are not  mapped by the MTRRs.  See Section 11.11.2.1, IA32_MTRR_DEF_TYPE MSR.",null,null],[17,"MSR_BPU_COUNTER0","","See Section 18.12.2, Performance Counters.",null,null],[17,"MSR_GQ_SNOOP_MESF","","",null,null],[17,"MSR_BPU_COUNTER1","","See Section 18.12.2, Performance Counters.",null,null],[17,"MSR_BPU_COUNTER2","","See Section 18.12.2, Performance Counters.",null,null],[17,"MSR_BPU_COUNTER3","","See Section 18.12.2, Performance Counters.",null,null],[17,"MSR_MS_COUNTER0","","See Section 18.12.2, Performance Counters.",null,null],[17,"MSR_MS_COUNTER1","","See Section 18.12.2, Performance Counters.",null,null],[17,"MSR_MS_COUNTER2","","See Section 18.12.2, Performance Counters.",null,null],[17,"MSR_MS_COUNTER3","","See Section 18.12.2, Performance Counters.",null,null],[17,"MSR_FLAME_COUNTER0","","See Section 18.12.2, Performance Counters.",null,null],[17,"MSR_PERF_FIXED_CTR0","","Fixed-Function Performance Counter Register 0 (R/W)",null,null],[17,"IA32_FIXED_CTR0","","Fixed-Function Performance Counter Register 0 (R/W)  See Table 35-2.",null,null],[17,"MSR_FLAME_COUNTER1","","See Section 18.12.2, Performance Counters.",null,null],[17,"MSR_PERF_FIXED_CTR1","","Fixed-Function Performance Counter Register 1 (R/W)",null,null],[17,"IA32_FIXED_CTR1","","Fixed-Function Performance Counter Register 1 (R/W)  See Table 35-2.",null,null],[17,"MSR_FLAME_COUNTER2","","See Section 18.12.2, Performance Counters.",null,null],[17,"MSR_PERF_FIXED_CTR2","","Fixed-Function Performance Counter Register 2 (R/W)",null,null],[17,"IA32_FIXED_CTR2","","Fixed-Function Performance Counter Register 2 (R/W)  See Table 35-2.",null,null],[17,"MSR_FLAME_COUNTER3","","See Section 18.12.2, Performance Counters.",null,null],[17,"MSR_IQ_COUNTER4","","See Section 18.12.2, Performance Counters.",null,null],[17,"MSR_IQ_COUNTER5","","See Section 18.12.2, Performance Counters.",null,null],[17,"IA32_PERF_CAPABILITIES","","See Table 35-2. See Section 17.4.1, IA32_DEBUGCTL MSR.",null,null],[17,"MSR_PERF_CAPABILITIES","","RO. This applies to processors that do not support architectural  perfmon version 2.",null,null],[17,"MSR_BPU_CCCR0","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_BPU_CCCR1","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_BPU_CCCR2","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_BPU_CCCR3","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_MS_CCCR0","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_MS_CCCR1","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_MS_CCCR2","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_MS_CCCR3","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_FLAME_CCCR0","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_FLAME_CCCR1","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_FLAME_CCCR2","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_FLAME_CCCR3","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_IQ_CCCR0","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_IQ_CCCR1","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_IQ_CCCR2","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_IQ_CCCR3","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_IQ_CCCR4","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_IQ_CCCR5","","See Section 18.12.3, CCCR MSRs.",null,null],[17,"MSR_PERF_FIXED_CTR_CTRL","","Fixed-Function-Counter Control Register (R/W)",null,null],[17,"IA32_FIXED_CTR_CTRL","","Fixed-Function-Counter Control Register (R/W)  See Table 35-2.",null,null],[17,"MSR_PERF_GLOBAL_STAUS","","See Section 18.4.2, Global Counter Control Facilities.",null,null],[17,"IA32_PERF_GLOBAL_STAUS","","See Table 35-2. See Section 18.4.2, Global Counter Control  Facilities.",null,null],[17,"MSR_PERF_GLOBAL_CTRL","","See Section 18.4.2, Global Counter Control Facilities.",null,null],[17,"IA32_PERF_GLOBAL_CTRL","","See Table 35-2. See Section 18.4.2, Global Counter Control  Facilities.",null,null],[17,"MSR_PERF_GLOBAL_OVF_CTRL","","See Section 18.4.2, Global Counter Control Facilities.",null,null],[17,"IA32_PERF_GLOBAL_OVF_CTRL","","See Table 35-2. See Section 18.4.2, Global Counter Control  Facilities.",null,null],[17,"MSR_UNCORE_PERF_GLOBAL_CTRL","","See Section 18.7.2.1, Uncore Performance Monitoring  Management Facility.",null,null],[17,"MSR_UNC_PERF_GLOBAL_CTRL","","Uncore PMU global control",null,null],[17,"MSR_UNCORE_PERF_GLOBAL_STATUS","","See Section 18.7.2.1, Uncore Performance Monitoring  Management Facility.",null,null],[17,"MSR_UNC_PERF_GLOBAL_STATUS","","Uncore PMU main status",null,null],[17,"MSR_UNCORE_PERF_GLOBAL_OVF_CTRL","","See Section 18.7.2.1, Uncore Performance Monitoring  Management Facility.",null,null],[17,"MSR_UNCORE_FIXED_CTR0","","See Section 18.7.2.1, Uncore Performance Monitoring  Management Facility.",null,null],[17,"MSR_W_PMON_FIXED_CTR","","Uncore W-box perfmon fixed counter",null,null],[17,"MSR_UNC_PERF_FIXED_CTRL","","Uncore fixed counter control (R/W)",null,null],[17,"MSR_UNCORE_FIXED_CTR_CTRL","","See Section 18.7.2.1, Uncore Performance Monitoring  Management Facility.",null,null],[17,"MSR_W_PMON_FIXED_CTR_CTL","","Uncore U-box perfmon fixed counter control MSR",null,null],[17,"MSR_UNC_PERF_FIXED_CTR","","Uncore fixed counter",null,null],[17,"MSR_UNCORE_ADDR_OPCODE_MATCH","","See Section 18.7.2.3, Uncore Address/Opcode Match MSR.",null,null],[17,"MSR_UNC_CBO_CONFIG","","Uncore C-Box configuration information (R/O)",null,null],[17,"MSR_PEBS_NUM_ALT","","",null,null],[17,"MSR_BSU_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_BSU_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_FSB_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_FSB_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_FIRM_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_FIRM_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_FLAME_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_FLAME_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_DAC_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_DAC_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_MOB_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_MOB_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_PMH_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_PMH_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_SAAT_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_SAAT_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_U2L_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_UNCORE_PMC0","","See Section 18.7.2.2, Uncore Performance Event Configuration  Facility.",null,null],[17,"MSR_UNC_ARB_PER_CTR0","","Uncore Arb unit, performance counter 0",null,null],[17,"MSR_U2L_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_UNCORE_PMC1","","See Section 18.7.2.2, Uncore Performance Event Configuration  Facility.",null,null],[17,"MSR_UNC_ARB_PER_CTR1","","Uncore Arb unit, performance counter 1",null,null],[17,"MSR_BPU_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_UNCORE_PMC2","","See Section 18.7.2.2, Uncore Performance Event Configuration  Facility.",null,null],[17,"MSR_UNC_ARB_PERFEVTSEL0","","Uncore Arb unit, counter 0 event select MSR",null,null],[17,"MSR_BPU_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_UNCORE_PMC3","","See Section 18.7.2.2, Uncore Performance Event Configuration Facility.",null,null],[17,"MSR_UNC_ARB_PERFEVTSEL1","","Uncore Arb unit, counter 1 event select MSR",null,null],[17,"MSR_IS_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_UNCORE_PMC4","","See Section 18.7.2.2, Uncore Performance Event Configuration Facility.",null,null],[17,"MSR_IS_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_UNCORE_PMC5","","See Section 18.7.2.2, Uncore Performance Event Configuration  Facility.",null,null],[17,"MSR_ITLB_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_UNCORE_PMC6","","See Section 18.7.2.2, Uncore Performance Event Configuration Facility.",null,null],[17,"MSR_ITLB_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_UNCORE_PMC7","","See Section 18.7.2.2, Uncore Performance Event Configuration Facility.",null,null],[17,"MSR_CRU_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_CRU_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_IQ_ESCR0","","See Section 18.12.1, ESCR MSRs. This MSR is not available on later processors. It is  only available on processor family 0FH, models  01H-02H.",null,null],[17,"MSR_IQ_ESCR1","","See Section 18.12.1, ESCR MSRs. This MSR is not available on later processors. It is  only available on processor family 0FH, models  01H-02H.",null,null],[17,"MSR_RAT_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_RAT_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_SSU_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_MS_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_UNCORE_PERFEVTSEL0","","See Section 18.7.2.2, Uncore Performance Event Configuration Facility.",null,null],[17,"MSR_MS_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_UNCORE_PERFEVTSEL1","","See Section 18.7.2.2, Uncore Performance Event Configuration Facility.",null,null],[17,"MSR_TBPU_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_UNCORE_PERFEVTSEL2","","See Section 18.7.2.2, Uncore Performance Event Configuration Facility.",null,null],[17,"MSR_TBPU_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_UNCORE_PERFEVTSEL3","","See Section 18.7.2.2, Uncore Performance Event Configuration Facility.",null,null],[17,"MSR_TC_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_UNCORE_PERFEVTSEL4","","See Section 18.7.2.2, Uncore Performance Event Configuration Facility.",null,null],[17,"MSR_TC_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_UNCORE_PERFEVTSEL5","","See Section 18.7.2.2, Uncore Performance Event Configuration Facility.",null,null],[17,"MSR_UNCORE_PERFEVTSEL6","","See Section 18.7.2.2, Uncore Performance Event Configuration Facility.",null,null],[17,"MSR_UNCORE_PERFEVTSEL7","","See Section 18.7.2.2, Uncore Performance Event Configuration Facility.",null,null],[17,"MSR_IX_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_ALF_ESCR0","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_ALF_ESCR1","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_CRU_ESCR2","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_CRU_ESCR3","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_CRU_ESCR4","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"MSR_CRU_ESCR5","","See Section 18.12.1, ESCR MSRs.",null,null],[17,"IA32_PEBS_ENABLE","","",null,null],[17,"MSR_PEBS_ENABLE","","Precise Event-Based Sampling (PEBS) (R/W)  Controls the enabling of precise event sampling  and replay tagging.",null,null],[17,"MSR_PEBS_MATRIX_VERT","","See Table 19-26.",null,null],[17,"MSR_PEBS_LD_LAT","","see See Section 18.7.1.2, Load Latency Performance Monitoring  Facility.",null,null],[17,"MSR_PKG_C3_RESIDENCY","","Note: C-state values are processor specific C-state code names,  unrelated to MWAIT extension C-state parameters or ACPI C- States.",null,null],[17,"MSR_PKG_C2_RESIDENCY","","Package C2 Residency Note: C-state values are processor specific C-state code names,  unrelated to MWAIT extension C-state parameters or ACPI C-States",null,null],[17,"MSR_PKG_C6C_RESIDENCY","","Note: C-state values are processor specific C-state code names,  unrelated to MWAIT extension C-state parameters or ACPI C- States.",null,null],[17,"MSR_PKG_C4_RESIDENCY","","Package C4 Residency Note: C-state values are processor specific C-state code names, unrelated to MWAIT extension C-state parameters or ACPI C-States",null,null],[17,"MSR_PKG_C7_RESIDENCY","","Note: C-state values are processor specific C-state code names,  unrelated to MWAIT extension C-state parameters or ACPI C- States.",null,null],[17,"MSR_PKG_C6_RESIDENCY","","Package C6 Residency Note: C-state values are processor specific C-state code names,  unrelated to MWAIT extension C-state parameters or ACPI C-States",null,null],[17,"MSR_CORE_C3_RESIDENCY","","Note: C-state values are processor specific C-state code names,  unrelated to MWAIT extension C-state parameters or ACPI C- States.",null,null],[17,"MSR_CORE_C4_RESIDENCY","","Note: C-state values are processor specific C-state code names,  unrelated to MWAIT extension C-state parameters or ACPI C- States.",null,null],[17,"MSR_CORE_C6_RESIDENCY","","Note: C-state values are processor specific C-state code names,  unrelated to MWAIT extension C-state parameters or ACPI C- States.",null,null],[17,"MSR_CORE_C7_RESIDENCY","","Note: C-state values are processor specific C-state code names,  unrelated to MWAIT extension C-state parameters or ACPI C- States.",null,null],[17,"MC0_CTL","","",null,null],[17,"IA32_MC0_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"MC0_STATUS","","",null,null],[17,"IA32_MC0_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"MC0_ADDR","","",null,null],[17,"IA32_MC0_ADDR1","","P6 Family Processors",null,null],[17,"IA32_MC0_ADDR","","See Section 14.3.2.3., IA32_MCi_ADDR MSRs .  The IA32_MC0_ADDR register is either not implemented or contains no address if the ADDRV flag in the IA32_MC0_STATUS register is clear.  When not implemented in the processor, all reads and writes to this MSR  will cause a general-protection exception.",null,null],[17,"MC0_MISC","","Defined in MCA architecture but not implemented in the P6 family  processors.",null,null],[17,"IA32_MC0_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs. The IA32_MC0_MISC MSR is either not  implemented or does not contain additional  information if the MISCV flag in the  IA32_MC0_STATUS register is clear. When not implemented in the processor, all reads  and writes to this MSR will cause a general- protection exception.",null,null],[17,"MSR_MC0_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"MC1_CTL","","",null,null],[17,"IA32_MC1_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"MC1_STATUS","","Bit definitions same as MC0_STATUS.",null,null],[17,"IA32_MC1_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"MC1_ADDR","","",null,null],[17,"IA32_MC1_ADDR2","","P6 Family Processors",null,null],[17,"IA32_MC1_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs. The IA32_MC1_ADDR register is either not implemented or  contains no address if the ADDRV flag in the IA32_MC1_STATUS  register is clear.  When not implemented in the processor, all reads and writes to this  MSR will cause a general-protection exception.",null,null],[17,"MC1_MISC","","Defined in MCA architecture but not implemented in the P6 family  processors.",null,null],[17,"IA32_MC1_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs. The IA32_MC1_MISC MSR is either not  implemented or does not contain additional  information if the MISCV flag in the  IA32_MC1_STATUS register is clear. When not implemented in the processor, all reads  and writes to this MSR will cause a general- protection exception.",null,null],[17,"MSR_MC1_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"MC2_CTL","","",null,null],[17,"IA32_MC2_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"MC2_STATUS","","Bit definitions same as MC0_STATUS.",null,null],[17,"IA32_MC2_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"MC2_ADDR","","",null,null],[17,"IA32_MC2_ADDR1","","P6 Family Processors",null,null],[17,"IA32_MC2_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs. The IA32_MC2_ADDR register is either not  implemented or contains no address if the ADDRV  flag in the IA32_MC2_STATUS register is clear.  When not implemented in the processor, all reads  and writes to this MSR will cause a general- protection exception.",null,null],[17,"MC2_MISC","","Defined in MCA architecture but not implemented in the P6 family  processors.",null,null],[17,"IA32_MC2_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs. The IA32_MC2_MISC MSR is either not  implemented or does not contain additional  information if the MISCV flag in the IA32_MC2_STATUS register is clear.  When not implemented in the processor, all reads  and writes to this MSR will cause a general- protection exception.",null,null],[17,"MSR_MC2_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"MC4_CTL","","",null,null],[17,"IA32_MC3_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"MSR_MC4_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"MC4_STATUS","","Bit definitions same as MC0_STATUS, except bits 0, 4, 57, and 61 are  hardcoded to 1.",null,null],[17,"IA32_MC3_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"MSR_MC4_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS.",null,null],[17,"MC4_ADDR","","Defined in MCA architecture but not implemented in P6 Family processors.",null,null],[17,"IA32_MC3_ADDR1","","P6 Family Processors",null,null],[17,"IA32_MC3_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs. The IA32_MC3_ADDR register is either not  implemented or contains no address if the ADDRV  flag in the IA32_MC3_STATUS register is clear. When not implemented in the processor, all reads  and writes to this MSR will cause a general- protection exception.",null,null],[17,"MSR_MC4_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs. The MSR_MC4_ADDR register is either not implemented or  contains no address if the ADDRV flag in the MSR_MC4_STATUS  register is clear. When not implemented in the processor, all reads and writes to this  MSR will cause a general-protection exception.",null,null],[17,"MC4_MISC","","Defined in MCA architecture but not implemented in the P6 family  processors.",null,null],[17,"IA32_MC3_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs. The IA32_MC3_MISC MSR is either not  implemented or does not contain additional  information if the MISCV flag in the  IA32_MC3_STATUS register is clear. When not implemented in the processor, all reads  and writes to this MSR will cause a general- protection exception.",null,null],[17,"MC3_CTL","","",null,null],[17,"IA32_MC4_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"MSR_MC3_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"MC3_STATUS","","Bit definitions same as MC0_STATUS.",null,null],[17,"IA32_MC4_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"MSR_MC3_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS.",null,null],[17,"MC3_ADDR","","",null,null],[17,"IA32_MC4_ADDR1","","P6 Family Processors",null,null],[17,"IA32_MC4_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs. The IA32_MC2_ADDR register is either not  implemented or contains no address if the ADDRV  flag in the IA32_MC4_STATUS register is clear.  When not implemented in the processor, all reads  and writes to this MSR will cause a general- protection exception.",null,null],[17,"MSR_MC3_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs. The MSR_MC3_ADDR register is either not implemented or  contains no address if the ADDRV flag in the MSR_MC3_STATUS register is clear.  When not implemented in the processor, all reads and writes to this  MSR will cause a general-protection exception.",null,null],[17,"MSR_MC3_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"MC3_MISC","","Defined in MCA architecture but not implemented in the P6 family  processors.",null,null],[17,"IA32_MC4_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.   The IA32_MC2_MISC MSR is either not  implemented or does not contain additional  information if the MISCV flag in the  IA32_MC4_STATUS register is clear.  When not implemented in the processor, all reads  and writes to this MSR will cause a general- protection exception.",null,null],[17,"MSR_MC4_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"MSR_MC5_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC5_CTL","","06_0FH",null,null],[17,"MSR_MC5_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC5_STATUS","","06_0FH",null,null],[17,"MSR_MC5_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs. The MSR_MC4_ADDR register is either not implemented or  contains no address if the ADDRV flag in the MSR_MC4_STATUS  register is clear. When not implemented in the processor, all reads and writes to this  MSR will cause a general-protection exception.",null,null],[17,"IA32_MC5_ADDR1","","06_0FH",null,null],[17,"MSR_MC5_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC5_MISC","","06_0FH",null,null],[17,"IA32_MC6_CTL","","06_1DH",null,null],[17,"MSR_MC6_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC6_STATUS","","06_1DH",null,null],[17,"MSR_MC6_STATUS","","Apply to Intel Xeon processor 7400 series (processor signature  06_1D) only. See Section 15.3.2.2, IA32_MCi_STATUS MSRS.  and  Chapter 23.",null,null],[17,"IA32_MC6_ADDR1","","06_1DH",null,null],[17,"MSR_MC6_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC6_MISC","","Misc MAC information of Integrated I/O. (R/O) see Section 15.3.2.4",null,null],[17,"MSR_MC6_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC7_CTL","","06_1AH",null,null],[17,"MSR_MC7_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC7_STATUS","","06_1AH",null,null],[17,"MSR_MC7_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC7_ADDR1","","06_1AH",null,null],[17,"MSR_MC7_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC7_MISC","","06_1AH",null,null],[17,"MSR_MC7_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC8_CTL","","06_1AH",null,null],[17,"MSR_MC8_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC8_STATUS","","06_1AH",null,null],[17,"MSR_MC8_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC8_ADDR1","","06_1AH",null,null],[17,"MSR_MC8_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC8_MISC","","06_1AH",null,null],[17,"MSR_MC8_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC9_CTL","","06_2EH",null,null],[17,"MSR_MC9_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC9_STATUS","","06_2EH",null,null],[17,"MSR_MC9_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC9_ADDR1","","06_2EH",null,null],[17,"MSR_MC9_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC9_MISC","","06_2EH",null,null],[17,"MSR_MC9_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC10_CTL","","06_2EH",null,null],[17,"MSR_MC10_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC10_STATUS","","06_2EH",null,null],[17,"MSR_MC10_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC10_ADDR1","","06_2EH",null,null],[17,"MSR_MC10_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC10_MISC","","06_2EH",null,null],[17,"MSR_MC10_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC11_CTL","","06_2EH",null,null],[17,"MSR_MC11_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC11_STATUS","","06_2EH",null,null],[17,"MSR_MC11_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC11_ADDR1","","06_2EH",null,null],[17,"MSR_MC11_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC11_MISC","","06_2EH",null,null],[17,"MSR_MC11_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC12_CTL","","06_2EH",null,null],[17,"MSR_MC12_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC12_STATUS","","06_2EH",null,null],[17,"MSR_MC12_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC12_ADDR1","","06_2EH",null,null],[17,"MSR_MC12_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC12_MISC","","06_2EH",null,null],[17,"MSR_MC12_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC13_CTL","","06_2EH",null,null],[17,"MSR_MC13_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC13_STATUS","","06_2EH",null,null],[17,"MSR_MC13_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC13_ADDR1","","06_2EH",null,null],[17,"MSR_MC13_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC13_MISC","","06_2EH",null,null],[17,"MSR_MC13_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC14_CTL","","06_2EH",null,null],[17,"MSR_MC14_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC14_STATUS","","06_2EH",null,null],[17,"MSR_MC14_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC14_ADDR1","","06_2EH",null,null],[17,"MSR_MC14_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC14_MISC","","06_2EH",null,null],[17,"MSR_MC14_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC15_CTL","","06_2EH",null,null],[17,"MSR_MC15_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC15_STATUS","","06_2EH",null,null],[17,"MSR_MC15_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC15_ADDR1","","06_2EH",null,null],[17,"MSR_MC15_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC15_MISC","","06_2EH",null,null],[17,"MSR_MC15_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC16_CTL","","06_2EH",null,null],[17,"MSR_MC16_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC16_STATUS","","06_2EH",null,null],[17,"MSR_MC16_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC16_ADDR1","","06_2EH",null,null],[17,"MSR_MC16_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC16_MISC","","06_2EH",null,null],[17,"MSR_MC16_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC17_CTL","","06_2EH",null,null],[17,"MSR_MC17_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC17_STATUS","","06_2EH",null,null],[17,"MSR_MC17_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC17_ADDR1","","06_2EH",null,null],[17,"MSR_MC17_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC17_MISC","","06_2EH",null,null],[17,"MSR_MC17_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC18_CTL","","06_2EH",null,null],[17,"MSR_MC18_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC18_STATUS","","06_2EH",null,null],[17,"MSR_MC18_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC18_ADDR1","","06_2EH",null,null],[17,"MSR_MC18_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC18_MISC","","06_2EH",null,null],[17,"MSR_MC18_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC19_CTL","","06_2EH",null,null],[17,"MSR_MC19_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC19_STATUS","","06_2EH",null,null],[17,"MSR_MC19_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC19_ADDR1","","06_2EH",null,null],[17,"MSR_MC19_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC19_MISC","","06_2EH",null,null],[17,"MSR_MC19_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC20_CTL","","06_2EH",null,null],[17,"MSR_MC20_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC20_STATUS","","06_2EH",null,null],[17,"MSR_MC20_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC20_ADDR1","","06_2EH",null,null],[17,"MSR_MC20_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC20_MISC","","06_2EH",null,null],[17,"MSR_MC20_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_MC21_CTL","","06_2EH",null,null],[17,"MSR_MC21_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"IA32_MC21_STATUS","","06_2EH",null,null],[17,"MSR_MC21_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"IA32_MC21_ADDR1","","06_2EH",null,null],[17,"MSR_MC21_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"IA32_MC21_MISC","","06_2EH",null,null],[17,"MSR_MC21_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"MSR_MC22_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"MSR_MC22_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"MSR_MC22_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"MSR_MC22_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"MSR_MC23_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"MSR_MC23_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"MSR_MC23_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"MSR_MC23_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"MSR_MC24_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"MSR_MC24_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"MSR_MC24_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"MSR_MC24_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"MSR_MC25_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"MSR_MC25_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"MSR_MC25_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"MSR_MC25_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"MSR_MC26_CTL","","See Section 15.3.2.1,  IA32_MCi_CTL MSRs.",null,null],[17,"MSR_MC26_STATUS","","See Section 15.3.2.2, IA32_MCi_STATUS MSRS,  and Chapter 16.",null,null],[17,"MSR_MC26_ADDR","","See Section 15.3.2.3, IA32_MCi_ADDR MSRs.",null,null],[17,"MSR_MC26_MISC","","See Section 15.3.2.4,  IA32_MCi_MISC MSRs.",null,null],[17,"IA32_VMX_BASIC","","Reporting Register of Basic VMX Capabilities (R/O) See Table 35-2. See Appendix A.1, Basic VMX Information (If CPUID.01H:ECX.[bit 9])",null,null],[17,"IA32_VMX_PINBASED_CTLS","","Capability Reporting Register of Pin-based VM-execution  Controls (R/O) See Appendix A.3, VM-Execution Controls (If CPUID.01H:ECX.[bit 9])",null,null],[17,"IA32_VMX_PROCBASED_CTLS","","Capability Reporting Register of Primary Processor-based  VM-execution Controls (R/O) See Appendix A.3, VM-Execution Controls (If CPUID.01H:ECX.[bit 9])",null,null],[17,"IA32_VMX_EXIT_CTLS","","Capability Reporting Register of VM-exit Controls (R/O) See Appendix A.4, VM-Exit Controls (If CPUID.01H:ECX.[bit 9])",null,null],[17,"IA32_VMX_ENTRY_CTLS","","Capability Reporting Register of VM-entry Controls (R/O) See Appendix A.5, VM-Entry Controls (If CPUID.01H:ECX.[bit 9])",null,null],[17,"IA32_VMX_MISC","","Reporting Register of Miscellaneous VMX Capabilities (R/O) See Appendix A.6, Miscellaneous Data (If CPUID.01H:ECX.[bit 9])",null,null],[17,"IA32_VMX_CR0_FIXED0","","Capability Reporting Register of CR0 Bits Fixed to 0 (R/O) See Appendix A.7, VMX-Fixed Bits in CR0 (If CPUID.01H:ECX.[bit 9])",null,null],[17,"IA32_VMX_CRO_FIXED0","","If CPUID.01H:ECX.[bit 5] = 1",null,null],[17,"IA32_VMX_CR0_FIXED1","","Capability Reporting Register of CR0 Bits Fixed to 1 (R/O) See Appendix A.7, VMX-Fixed Bits in CR0 (If CPUID.01H:ECX.[bit 9])",null,null],[17,"IA32_VMX_CRO_FIXED1","","If CPUID.01H:ECX.[bit 5] = 1",null,null],[17,"IA32_VMX_CR4_FIXED0","","Capability Reporting Register of CR4 Bits Fixed to 0 (R/O) See Appendix A.8, VMX-Fixed Bits in CR4 (If CPUID.01H:ECX.[bit 9])",null,null],[17,"IA32_VMX_CR4_FIXED1","","Capability Reporting Register of CR4 Bits Fixed to 1 (R/O) See Appendix A.8, VMX-Fixed Bits in CR4 (If CPUID.01H:ECX.[bit 9])",null,null],[17,"IA32_VMX_VMCS_ENUM","","Capability Reporting Register of VMCS Field Enumeration (R/O) See Appendix A.9, VMCS Enumeration (If CPUID.01H:ECX.[bit 9])",null,null],[17,"IA32_VMX_PROCBASED_CTLS2","","Capability Reporting Register of Secondary Processor-based  VM-execution Controls (R/O) See Appendix A.3, VM-Execution Controls (If CPUID.01H:ECX.[bit 9] and  IA32_VMX_PROCBASED_CTLS[bit 63])",null,null],[17,"IA32_VMX_EPT_VPID_ENUM","","Capability Reporting Register of EPT and VPID (R/O)  See Table 35-2",null,null],[17,"IA32_VMX_EPT_VPID_CAP","","If ( CPUID.01H:ECX.[bit 5],  IA32_VMX_PROCBASED_C TLS[bit 63], and either  IA32_VMX_PROCBASED_C TLS2[bit 33] or  IA32_VMX_PROCBASED_C TLS2[bit 37])",null,null],[17,"IA32_VMX_TRUE_PINBASED_CTLS","","Capability Reporting Register of Pin-based VM-execution Flex  Controls (R/O) See Table 35-2",null,null],[17,"IA32_VMX_TRUE_PROCBASED_CTLS","","Capability Reporting Register of Primary Processor-based  VM-execution Flex Controls (R/O) See Table 35-2",null,null],[17,"IA32_VMX_TRUE_EXIT_CTLS","","Capability Reporting Register of VM-exit Flex Controls (R/O) See Table 35-2",null,null],[17,"IA32_VMX_TRUE_ENTRY_CTLS","","Capability Reporting Register of VM-entry Flex Controls (R/O) See Table 35-2",null,null],[17,"IA32_VMX_FMFUNC","","Capability Reporting Register of VM-function Controls (R/O) See Table 35-2",null,null],[17,"IA32_VMX_VMFUNC","","If( CPUID.01H:ECX.[bit 5] =  1 and IA32_VMX_BASIC[bit 55] )",null,null],[17,"IA32_A_PMC0","","(If CPUID.0AH: EAX[15:8] >  0) & IA32_PERF_CAPABILITIES[ 13] = 1",null,null],[17,"IA32_A_PMC1","","(If CPUID.0AH: EAX[15:8] >  1) & IA32_PERF_CAPABILITIES[ 13] = 1",null,null],[17,"IA32_A_PMC2","","(If CPUID.0AH: EAX[15:8] >  2) & IA32_PERF_CAPABILITIES[ 13] = 1",null,null],[17,"IA32_A_PMC3","","(If CPUID.0AH: EAX[15:8] >  3) & IA32_PERF_CAPABILITIES[ 13] = 1",null,null],[17,"IA32_A_PMC4","","(If CPUID.0AH: EAX[15:8] >  4) & IA32_PERF_CAPABILITIES[ 13] = 1",null,null],[17,"IA32_A_PMC5","","(If CPUID.0AH: EAX[15:8] >  5) & IA32_PERF_CAPABILITIES[ 13] = 1",null,null],[17,"IA32_A_PMC6","","(If CPUID.0AH: EAX[15:8] >  6) & IA32_PERF_CAPABILITIES[ 13] = 1",null,null],[17,"IA32_A_PMC7","","(If CPUID.0AH: EAX[15:8] >  7) & IA32_PERF_CAPABILITIES[ 13] = 1",null,null],[17,"MSR_SMM_FEATURE_CONTROL","","Enhanced SMM Feature Control (SMM-RW) Reports SMM capability Enhancement. Accessible only while in  SMM.",null,null],[17,"MSR_SMM_DELAYED","","SMM Delayed (SMM-RO) Reports the interruptible state of all logical processors in the  package . Available only while in SMM and  MSR_SMM_MCA_CAP[LONG_FLOW_INDICATION] == 1.",null,null],[17,"MSR_SMM_BLOCKED","","SMM Blocked (SMM-RO) Reports the blocked state of all logical processors in the package .  Available only while in SMM.",null,null],[17,"IA32_DS_AREA","","DS Save Area (R/W) See Table 35-2. Points to the DS buffer management area, which is used to manage the  BTS and PEBS buffers. See Section 18.12.4, Debug Store (DS)  Mechanism.",null,null],[17,"MSR_RAPL_POWER_UNIT","","Unit Multipliers used in RAPL Interfaces (R/O)  See Section 14.7.1, RAPL Interfaces.",null,null],[17,"MSR_PKGC3_IRTL","","Package C3 Interrupt Response Limit (R/W)  Note: C-state values are processor specific C-state code names,  unrelated to MWAIT extension C-state parameters or ACPI C- States.",null,null],[17,"MSR_PKGC6_IRTL","","Package C6 Interrupt Response Limit (R/W)  This MSR defines the budget allocated for the package to exit from  C6 to a C0 state, where interrupt request can be delivered to the  core and serviced. Additional core-exit latency amy be applicable  depending on the actual C-state the core is in.  Note: C-state values are processor specific C-state code names,  unrelated to MWAIT extension C-state parameters or ACPI C- States.",null,null],[17,"MSR_PKGC7_IRTL","","Package C7 Interrupt Response Limit (R/W)  This MSR defines the budget allocated for the package to exit from  C7 to a C0 state, where interrupt request can be delivered to the  core and serviced. Additional core-exit latency amy be applicable  depending on the actual C-state the core is in.  Note: C-state values are processor specific C-state code names,  unrelated to MWAIT extension C-state parameters or ACPI C-States.",null,null],[17,"MSR_PKG_POWER_LIMIT","","PKG RAPL Power Limit Control (R/W)  See Section 14.7.3, Package RAPL Domain.",null,null],[17,"MSR_PKG_ENERGY_STATUS","","PKG Energy Status (R/O)  See Section 14.7.3, Package RAPL Domain.",null,null],[17,"MSR_PKG_PERF_STATUS","","Package RAPL Perf Status (R/O)",null,null],[17,"MSR_PKG_POWER_INFO","","PKG RAPL Parameters (R/W) See Section 14.7.3,  Package RAPL  Domain.",null,null],[17,"MSR_DRAM_POWER_LIMIT","","DRAM RAPL Power Limit Control (R/W)  See Section 14.7.5, DRAM RAPL Domain.",null,null],[17,"MSR_DRAM_ENERGY_STATUS","","DRAM Energy Status (R/O)  See Section 14.7.5, DRAM RAPL Domain.",null,null],[17,"MSR_DRAM_PERF_STATUS","","DRAM Performance Throttling Status (R/O) See Section 14.7.5,  DRAM RAPL Domain.",null,null],[17,"MSR_DRAM_POWER_INFO","","DRAM RAPL Parameters (R/W) See Section 14.7.5, DRAM RAPL Domain.",null,null],[17,"MSR_PKG_C9_RESIDENCY","","Note: C-state values are processor specific C-state code names, unrelated to MWAIT extension C-state parameters or ACPI C-States.",null,null],[17,"MSR_PKG_C10_RESIDENCY","","Note: C-state values are processor specific C-state code names,  unrelated to MWAIT extension C-state parameters or ACPI C-States.",null,null],[17,"MSR_PP0_POWER_LIMIT","","PP0 RAPL Power Limit Control (R/W)  See Section 14.7.4, PP0/PP1 RAPL Domains.",null,null],[17,"MSR_PP0_ENERGY_STATUS","","PP0 Energy Status (R/O)  See Section 14.7.4, PP0/PP1 RAPL Domains.",null,null],[17,"MSR_PP0_POLICY","","PP0 Balance Policy (R/W)  See Section 14.7.4, PP0/PP1 RAPL Domains.",null,null],[17,"MSR_PP0_PERF_STATUS","","PP0 Performance Throttling Status (R/O) See Section 14.7.4,  PP0/PP1 RAPL Domains.",null,null],[17,"MSR_PP1_POWER_LIMIT","","PP1 RAPL Power Limit Control (R/W)  See Section 14.7.4, PP0/PP1 RAPL Domains.",null,null],[17,"MSR_PP1_ENERGY_STATUS","","PP1 Energy Status (R/O)  See Section 14.7.4, PP0/PP1 RAPL Domains.",null,null],[17,"MSR_PP1_POLICY","","PP1 Balance Policy (R/W)  See Section 14.7.4, PP0/PP1 RAPL Domains.",null,null],[17,"MSR_CONFIG_TDP_NOMINAL","","Nominal TDP Ratio (R/O)",null,null],[17,"MSR_CONFIG_TDP_LEVEL1","","ConfigTDP Level 1 ratio and power level (R/O)",null,null],[17,"MSR_CONFIG_TDP_LEVEL2","","ConfigTDP Level 2 ratio and power level (R/O)",null,null],[17,"MSR_CONFIG_TDP_CONTROL","","ConfigTDP Control (R/W)",null,null],[17,"MSR_TURBO_ACTIVATION_RATIO","","ConfigTDP Control (R/W)",null,null],[17,"MSR_CORE_C1_RESIDENCY","","Note: C-state values are processor specific C-state code names,  unrelated to MWAIT extension C-state parameters or ACPI C- States.",null,null],[17,"MSR_LASTBRANCH_8_FROM_IP","","Last Branch Record 8 From IP (R/W) See description of MSR_LASTBRANCH_0_FROM_IP.",null,null],[17,"MSR_LASTBRANCH_9_FROM_IP","","Last Branch Record 9 From IP (R/W) See description of MSR_LASTBRANCH_0_FROM_IP.",null,null],[17,"MSR_LASTBRANCH_10_FROM_IP","","Last Branch Record 10 From IP (R/W) See description of MSR_LASTBRANCH_0_FROM_IP.",null,null],[17,"MSR_LASTBRANCH_11_FROM_IP","","Last Branch Record 11 From IP (R/W) See description of MSR_LASTBRANCH_0_FROM_IP.",null,null],[17,"MSR_LASTBRANCH_12_FROM_IP","","Last Branch Record 12 From IP (R/W) See description of MSR_LASTBRANCH_0_FROM_IP.",null,null],[17,"MSR_LASTBRANCH_13_FROM_IP","","Last Branch Record 13 From IP (R/W) See description of MSR_LASTBRANCH_0_FROM_IP.",null,null],[17,"MSR_LASTBRANCH_14_FROM_IP","","Last Branch Record 14 From IP (R/W) See description of MSR_LASTBRANCH_0_FROM_IP.",null,null],[17,"MSR_LASTBRANCH_15_FROM_IP","","Last Branch Record 15 From IP (R/W) See description of MSR_LASTBRANCH_0_FROM_IP.",null,null],[17,"MSR_LASTBRANCH_8_TO_IP","","Last Branch Record 8 To IP (R/W) See description of MSR_LASTBRANCH_0_TO_IP.",null,null],[17,"MSR_LASTBRANCH_9_TO_IP","","Last Branch Record 9 To IP (R/W) See description of MSR_LASTBRANCH_0_TO_IP.",null,null],[17,"MSR_LASTBRANCH_10_TO_IP","","Last Branch Record 10 To IP (R/W) See description of MSR_LASTBRANCH_0_TO_IP.",null,null],[17,"MSR_LASTBRANCH_11_TO_IP","","Last Branch Record 11 To IP (R/W) See description of MSR_LASTBRANCH_0_TO_IP.",null,null],[17,"MSR_LASTBRANCH_12_TO_IP","","Last Branch Record 12 To IP (R/W) See description of MSR_LASTBRANCH_0_TO_IP.",null,null],[17,"MSR_LASTBRANCH_13_TO_IP","","Last Branch Record 13 To IP (R/W) See description of MSR_LASTBRANCH_0_TO_IP.",null,null],[17,"MSR_LASTBRANCH_14_TO_IP","","Last Branch Record 14 To IP (R/W) See description of MSR_LASTBRANCH_0_TO_IP.",null,null],[17,"MSR_LASTBRANCH_15_TO_IP","","Last Branch Record 15 To IP (R/W) See description of MSR_LASTBRANCH_0_TO_IP.",null,null],[17,"IA32_TSC_DEADLINE","","TSC Target of Local APIC s TSC Deadline Mode (R/W)  See Table 35-2",null,null],[17,"MSR_UNC_CBO_0_PERFEVTSEL0","","Uncore C-Box 0, counter 0 event select MSR",null,null],[17,"MSR_UNC_CBO_0_PERFEVTSEL1","","Uncore C-Box 0, counter 1 event select MSR",null,null],[17,"MSR_UNC_CBO_0_PER_CTR0","","Uncore C-Box 0, performance counter 0",null,null],[17,"MSR_UNC_CBO_0_PER_CTR1","","Uncore C-Box 0, performance counter 1",null,null],[17,"MSR_UNC_CBO_1_PERFEVTSEL0","","Uncore C-Box 1, counter 0 event select MSR",null,null],[17,"MSR_UNC_CBO_1_PERFEVTSEL1","","Uncore C-Box 1, counter 1 event select MSR",null,null],[17,"MSR_UNC_CBO_1_PER_CTR0","","Uncore C-Box 1, performance counter 0",null,null],[17,"MSR_UNC_CBO_1_PER_CTR1","","Uncore C-Box 1, performance counter 1",null,null],[17,"MSR_UNC_CBO_2_PERFEVTSEL0","","Uncore C-Box 2, counter 0 event select MSR",null,null],[17,"MSR_UNC_CBO_2_PERFEVTSEL1","","Uncore C-Box 2, counter 1 event select MSR",null,null],[17,"MSR_UNC_CBO_2_PER_CTR0","","Uncore C-Box 2, performance counter 0",null,null],[17,"MSR_UNC_CBO_2_PER_CTR1","","Uncore C-Box 2, performance counter 1",null,null],[17,"MSR_UNC_CBO_3_PERFEVTSEL0","","Uncore C-Box 3, counter 0 event select MSR",null,null],[17,"MSR_UNC_CBO_3_PERFEVTSEL1","","Uncore C-Box 3, counter 1 event select MSR.",null,null],[17,"MSR_UNC_CBO_3_PER_CTR0","","Uncore C-Box 3, performance counter 0.",null,null],[17,"MSR_UNC_CBO_3_PER_CTR1","","Uncore C-Box 3, performance counter 1.",null,null],[17,"IA32_X2APIC_APICID","","x2APIC ID register (R/O) See x2APIC Specification.",null,null],[17,"IA32_X2APIC_VERSION","","If ( CPUID.01H:ECX.[bit 21]  = 1 )",null,null],[17,"IA32_X2APIC_TPR","","x2APIC Task Priority register (R/W)",null,null],[17,"IA32_X2APIC_PPR","","x2APIC Processor Priority register (R/O)",null,null],[17,"IA32_X2APIC_EOI","","If ( CPUID.01H:ECX.[bit 21]  = 1 )",null,null],[17,"IA32_X2APIC_LDR","","x2APIC Logical Destination register (R/O)",null,null],[17,"IA32_X2APIC_SIVR","","x2APIC Spurious Interrupt Vector register (R/W)",null,null],[17,"IA32_X2APIC_ISR0","","x2APIC In-Service register bits [31:0] (R/O)",null,null],[17,"IA32_X2APIC_ISR1","","x2APIC In-Service register bits [63:32] (R/O)",null,null],[17,"IA32_X2APIC_ISR2","","x2APIC In-Service register bits [95:64] (R/O)",null,null],[17,"IA32_X2APIC_ISR3","","x2APIC In-Service register bits [127:96] (R/O)",null,null],[17,"IA32_X2APIC_ISR4","","x2APIC In-Service register bits [159:128] (R/O)",null,null],[17,"IA32_X2APIC_ISR5","","x2APIC In-Service register bits [191:160] (R/O)",null,null],[17,"IA32_X2APIC_ISR6","","x2APIC In-Service register bits [223:192] (R/O)",null,null],[17,"IA32_X2APIC_ISR7","","x2APIC In-Service register bits [255:224] (R/O)",null,null],[17,"IA32_X2APIC_TMR0","","x2APIC Trigger Mode register bits [31:0] (R/O)",null,null],[17,"IA32_X2APIC_TMR1","","x2APIC Trigger Mode register bits [63:32] (R/O)",null,null],[17,"IA32_X2APIC_TMR2","","x2APIC Trigger Mode register bits [95:64] (R/O)",null,null],[17,"IA32_X2APIC_TMR3","","x2APIC Trigger Mode register bits [127:96] (R/O)",null,null],[17,"IA32_X2APIC_TMR4","","x2APIC Trigger Mode register bits [159:128] (R/O)",null,null],[17,"IA32_X2APIC_TMR5","","x2APIC Trigger Mode register bits [191:160] (R/O)",null,null],[17,"IA32_X2APIC_TMR6","","x2APIC Trigger Mode register bits [223:192] (R/O)",null,null],[17,"IA32_X2APIC_TMR7","","x2APIC Trigger Mode register bits [255:224] (R/O)",null,null],[17,"IA32_X2APIC_IRR0","","x2APIC Interrupt Request register bits [31:0] (R/O)",null,null],[17,"IA32_X2APIC_IRR1","","x2APIC Interrupt Request register bits [63:32] (R/O)",null,null],[17,"IA32_X2APIC_IRR2","","x2APIC Interrupt Request register bits [95:64] (R/O)",null,null],[17,"IA32_X2APIC_IRR3","","x2APIC Interrupt Request register bits [127:96] (R/O)",null,null],[17,"IA32_X2APIC_IRR4","","x2APIC Interrupt Request register bits [159:128] (R/O)",null,null],[17,"IA32_X2APIC_IRR5","","x2APIC Interrupt Request register bits [191:160] (R/O)",null,null],[17,"IA32_X2APIC_IRR6","","x2APIC Interrupt Request register bits [223:192] (R/O)",null,null],[17,"IA32_X2APIC_IRR7","","x2APIC Interrupt Request register bits [255:224] (R/O)",null,null],[17,"IA32_X2APIC_ESR","","If ( CPUID.01H:ECX.[bit 21]  = 1 )",null,null],[17,"IA32_X2APIC_LVT_CMCI","","x2APIC LVT Corrected Machine Check Interrupt register (R/W)",null,null],[17,"IA32_X2APIC_ICR","","x2APIC Interrupt Command register (R/W)",null,null],[17,"IA32_X2APIC_LVT_TIMER","","x2APIC LVT Timer Interrupt register (R/W)",null,null],[17,"IA32_X2APIC_LVT_THERMAL","","x2APIC LVT Thermal Sensor Interrupt register (R/W)",null,null],[17,"IA32_X2APIC_LVT_PMI","","x2APIC LVT Performance Monitor register (R/W)",null,null],[17,"IA32_X2APIC_LVT_LINT0","","If ( CPUID.01H:ECX.[bit 21]  = 1 )",null,null],[17,"IA32_X2APIC_LVT_LINT1","","If ( CPUID.01H:ECX.[bit 21]  = 1 )",null,null],[17,"IA32_X2APIC_LVT_ERROR","","If ( CPUID.01H:ECX.[bit 21]  = 1 )",null,null],[17,"IA32_X2APIC_INIT_COUNT","","x2APIC Initial Count register (R/W)",null,null],[17,"IA32_X2APIC_CUR_COUNT","","x2APIC Current Count register (R/O)",null,null],[17,"IA32_X2APIC_DIV_CONF","","x2APIC Divide Configuration register (R/W)",null,null],[17,"IA32_X2APIC_SELF_IPI","","If ( CPUID.01H:ECX.[bit 21]  = 1 )",null,null],[17,"MSR_U_PMON_GLOBAL_CTRL","","Uncore U-box perfmon global control MSR.",null,null],[17,"MSR_U_PMON_GLOBAL_STATUS","","Uncore U-box perfmon global status MSR.",null,null],[17,"MSR_U_PMON_GLOBAL_OVF_CTRL","","Uncore U-box perfmon global overflow control MSR.",null,null],[17,"MSR_U_PMON_EVNT_SEL","","Uncore U-box perfmon event select MSR.",null,null],[17,"MSR_U_PMON_CTR","","Uncore U-box perfmon counter MSR.",null,null],[17,"MSR_B0_PMON_BOX_CTRL","","Uncore B-box 0 perfmon local box control MSR.",null,null],[17,"MSR_B0_PMON_BOX_STATUS","","Uncore B-box 0 perfmon local box status MSR.",null,null],[17,"MSR_B0_PMON_BOX_OVF_CTRL","","Uncore B-box 0 perfmon local box overflow control MSR.",null,null],[17,"MSR_B0_PMON_EVNT_SEL0","","Uncore B-box 0 perfmon event select MSR.",null,null],[17,"MSR_B0_PMON_CTR0","","Uncore B-box 0 perfmon counter MSR.",null,null],[17,"MSR_B0_PMON_EVNT_SEL1","","Uncore B-box 0 perfmon event select MSR.",null,null],[17,"MSR_B0_PMON_CTR1","","Uncore B-box 0 perfmon counter MSR.",null,null],[17,"MSR_B0_PMON_EVNT_SEL2","","Uncore B-box 0 perfmon event select MSR.",null,null],[17,"MSR_B0_PMON_CTR2","","Uncore B-box 0 perfmon counter MSR.",null,null],[17,"MSR_B0_PMON_EVNT_SEL3","","Uncore B-box 0 perfmon event select MSR.",null,null],[17,"MSR_B0_PMON_CTR3","","Uncore B-box 0 perfmon counter MSR.",null,null],[17,"MSR_S0_PMON_BOX_CTRL","","Uncore S-box 0 perfmon local box control MSR.",null,null],[17,"MSR_S0_PMON_BOX_STATUS","","Uncore S-box 0 perfmon local box status MSR.",null,null],[17,"MSR_S0_PMON_BOX_OVF_CTRL","","Uncore S-box 0 perfmon local box overflow control MSR.",null,null],[17,"MSR_S0_PMON_EVNT_SEL0","","Uncore S-box 0 perfmon event select MSR.",null,null],[17,"MSR_S0_PMON_CTR0","","Uncore S-box 0 perfmon counter MSR.",null,null],[17,"MSR_S0_PMON_EVNT_SEL1","","Uncore S-box 0 perfmon event select MSR.",null,null],[17,"MSR_S0_PMON_CTR1","","Uncore S-box 0 perfmon counter MSR.",null,null],[17,"MSR_S0_PMON_EVNT_SEL2","","Uncore S-box 0 perfmon event select MSR.",null,null],[17,"MSR_S0_PMON_CTR2","","Uncore S-box 0 perfmon counter MSR.",null,null],[17,"MSR_S0_PMON_EVNT_SEL3","","Uncore S-box 0 perfmon event select MSR.",null,null],[17,"MSR_S0_PMON_CTR3","","Uncore S-box 0 perfmon counter MSR.",null,null],[17,"MSR_B1_PMON_BOX_CTRL","","Uncore B-box 1 perfmon local box control MSR.",null,null],[17,"MSR_B1_PMON_BOX_STATUS","","Uncore B-box 1 perfmon local box status MSR.",null,null],[17,"MSR_B1_PMON_BOX_OVF_CTRL","","Uncore B-box 1 perfmon local box overflow control MSR.",null,null],[17,"MSR_B1_PMON_EVNT_SEL0","","Uncore B-box 1 perfmon event select MSR.",null,null],[17,"MSR_B1_PMON_CTR0","","Uncore B-box 1 perfmon counter MSR.",null,null],[17,"MSR_B1_PMON_EVNT_SEL1","","Uncore B-box 1 perfmon event select MSR.",null,null],[17,"MSR_B1_PMON_CTR1","","Uncore B-box 1 perfmon counter MSR.",null,null],[17,"MSR_B1_PMON_EVNT_SEL2","","Uncore B-box 1 perfmon event select MSR.",null,null],[17,"MSR_B1_PMON_CTR2","","Uncore B-box 1 perfmon counter MSR.",null,null],[17,"MSR_B1_PMON_EVNT_SEL3","","Uncore B-box 1vperfmon event select MSR.",null,null],[17,"MSR_B1_PMON_CTR3","","Uncore B-box 1 perfmon counter MSR.",null,null],[17,"MSR_W_PMON_BOX_CTRL","","Uncore W-box perfmon local box control MSR.",null,null],[17,"MSR_W_PMON_BOX_STATUS","","Uncore W-box perfmon local box status MSR.",null,null],[17,"MSR_W_PMON_BOX_OVF_CTRL","","Uncore W-box perfmon local box overflow control MSR.",null,null],[17,"IA32_QM_EVTSEL","","If ( CPUID.(EAX=07H,  ECX=0):EBX.[bit 12] = 1 )",null,null],[17,"IA32_QM_CTR","","If ( CPUID.(EAX=07H,  ECX=0):EBX.[bit 12] = 1 )",null,null],[17,"IA32_PQR_ASSOC","","If ( CPUID.(EAX=07H,  ECX=0):EBX.[bit 12] = 1 )",null,null],[17,"MSR_W_PMON_EVNT_SEL0","","Uncore W-box perfmon event select MSR.",null,null],[17,"MSR_W_PMON_CTR0","","Uncore W-box perfmon counter MSR.",null,null],[17,"MSR_W_PMON_EVNT_SEL1","","Uncore W-box perfmon event select MSR.",null,null],[17,"MSR_W_PMON_CTR1","","Uncore W-box perfmon counter MSR.",null,null],[17,"MSR_W_PMON_EVNT_SEL2","","Uncore W-box perfmon event select MSR.",null,null],[17,"MSR_W_PMON_CTR2","","Uncore W-box perfmon counter MSR.",null,null],[17,"MSR_W_PMON_EVNT_SEL3","","Uncore W-box perfmon event select MSR.",null,null],[17,"MSR_W_PMON_CTR3","","Uncore W-box perfmon counter MSR.",null,null],[17,"MSR_M0_PMON_BOX_CTRL","","Uncore M-box 0 perfmon local box control MSR.",null,null],[17,"MSR_M0_PMON_BOX_STATUS","","Uncore M-box 0 perfmon local box status MSR.",null,null],[17,"MSR_M0_PMON_BOX_OVF_CTRL","","Uncore M-box 0 perfmon local box overflow control MSR.",null,null],[17,"MSR_M0_PMON_TIMESTAMP","","Uncore M-box 0 perfmon time stamp unit select MSR.",null,null],[17,"MSR_M0_PMON_DSP","","Uncore M-box 0 perfmon DSP unit select MSR.",null,null],[17,"MSR_M0_PMON_ISS","","Uncore M-box 0 perfmon ISS unit select MSR.",null,null],[17,"MSR_M0_PMON_MAP","","Uncore M-box 0 perfmon MAP unit select MSR.",null,null],[17,"MSR_M0_PMON_MSC_THR","","Uncore M-box 0 perfmon MIC THR select MSR.",null,null],[17,"MSR_M0_PMON_PGT","","Uncore M-box 0 perfmon PGT unit select MSR.",null,null],[17,"MSR_M0_PMON_PLD","","Uncore M-box 0 perfmon PLD unit select MSR.",null,null],[17,"MSR_M0_PMON_ZDP","","Uncore M-box 0 perfmon ZDP unit select MSR.",null,null],[17,"MSR_M0_PMON_EVNT_SEL0","","Uncore M-box 0 perfmon event select MSR.",null,null],[17,"MSR_M0_PMON_CTR0","","Uncore M-box 0 perfmon counter MSR.",null,null],[17,"MSR_M0_PMON_EVNT_SEL1","","Uncore M-box 0 perfmon event select MSR.",null,null],[17,"MSR_M0_PMON_CTR1","","Uncore M-box 0 perfmon counter MSR.",null,null],[17,"MSR_M0_PMON_EVNT_SEL2","","Uncore M-box 0 perfmon event select MSR.",null,null],[17,"MSR_M0_PMON_CTR2","","Uncore M-box 0 perfmon counter MSR.",null,null],[17,"MSR_M0_PMON_EVNT_SEL3","","Uncore M-box 0 perfmon event select MSR.",null,null],[17,"MSR_M0_PMON_CTR3","","Uncore M-box 0 perfmon counter MSR.",null,null],[17,"MSR_M0_PMON_EVNT_SEL4","","Uncore M-box 0 perfmon event select MSR.",null,null],[17,"MSR_M0_PMON_CTR4","","Uncore M-box 0 perfmon counter MSR.",null,null],[17,"MSR_M0_PMON_EVNT_SEL5","","Uncore M-box 0 perfmon event select MSR.",null,null],[17,"MSR_M0_PMON_CTR5","","Uncore M-box 0 perfmon counter MSR.",null,null],[17,"MSR_S1_PMON_BOX_CTRL","","Uncore S-box 1 perfmon local box control MSR.",null,null],[17,"MSR_S1_PMON_BOX_STATUS","","Uncore S-box 1 perfmon local box status MSR.",null,null],[17,"MSR_S1_PMON_BOX_OVF_CTRL","","Uncore S-box 1 perfmon local box overflow control MSR.",null,null],[17,"MSR_S1_PMON_EVNT_SEL0","","Uncore S-box 1 perfmon event select MSR.",null,null],[17,"MSR_S1_PMON_CTR0","","Uncore S-box 1 perfmon counter MSR.",null,null],[17,"MSR_S1_PMON_EVNT_SEL1","","Uncore S-box 1 perfmon event select MSR.",null,null],[17,"MSR_S1_PMON_CTR1","","Uncore S-box 1 perfmon counter MSR.",null,null],[17,"MSR_S1_PMON_EVNT_SEL2","","Uncore S-box 1 perfmon event select MSR.",null,null],[17,"MSR_S1_PMON_CTR2","","Uncore S-box 1 perfmon counter MSR.",null,null],[17,"MSR_S1_PMON_EVNT_SEL3","","Uncore S-box 1 perfmon event select MSR.",null,null],[17,"MSR_S1_PMON_CTR3","","Uncore S-box 1 perfmon counter MSR.",null,null],[17,"MSR_M1_PMON_BOX_CTRL","","Uncore M-box 1 perfmon local box control MSR.",null,null],[17,"MSR_M1_PMON_BOX_STATUS","","Uncore M-box 1 perfmon local box status MSR.",null,null],[17,"MSR_M1_PMON_BOX_OVF_CTRL","","Uncore M-box 1 perfmon local box overflow control MSR.",null,null],[17,"MSR_M1_PMON_TIMESTAMP","","Uncore M-box 1 perfmon time stamp unit select MSR.",null,null],[17,"MSR_M1_PMON_DSP","","Uncore M-box 1 perfmon DSP unit select MSR.",null,null],[17,"MSR_M1_PMON_ISS","","Uncore M-box 1 perfmon ISS unit select MSR.",null,null],[17,"MSR_M1_PMON_MAP","","Uncore M-box 1 perfmon MAP unit select MSR.",null,null],[17,"MSR_M1_PMON_MSC_THR","","Uncore M-box 1 perfmon MIC THR select MSR.",null,null],[17,"MSR_M1_PMON_PGT","","Uncore M-box 1 perfmon PGT unit select MSR.",null,null],[17,"MSR_M1_PMON_PLD","","Uncore M-box 1 perfmon PLD unit select MSR.",null,null],[17,"MSR_M1_PMON_ZDP","","Uncore M-box 1 perfmon ZDP unit select MSR.",null,null],[17,"MSR_M1_PMON_EVNT_SEL0","","Uncore M-box 1 perfmon event select MSR.",null,null],[17,"MSR_M1_PMON_CTR0","","Uncore M-box 1 perfmon counter MSR.",null,null],[17,"MSR_M1_PMON_EVNT_SEL1","","Uncore M-box 1 perfmon event select MSR.",null,null],[17,"MSR_M1_PMON_CTR1","","Uncore M-box 1 perfmon counter MSR.",null,null],[17,"MSR_M1_PMON_EVNT_SEL2","","Uncore M-box 1 perfmon event select MSR.",null,null],[17,"MSR_M1_PMON_CTR2","","Uncore M-box 1 perfmon counter MSR.",null,null],[17,"MSR_M1_PMON_EVNT_SEL3","","Uncore M-box 1 perfmon event select MSR.",null,null],[17,"MSR_M1_PMON_CTR3","","Uncore M-box 1 perfmon counter MSR.",null,null],[17,"MSR_M1_PMON_EVNT_SEL4","","Uncore M-box 1 perfmon event select MSR.",null,null],[17,"MSR_M1_PMON_CTR4","","Uncore M-box 1 perfmon counter MSR.",null,null],[17,"MSR_M1_PMON_EVNT_SEL5","","Uncore M-box 1 perfmon event select MSR.",null,null],[17,"MSR_M1_PMON_CTR5","","Uncore M-box 1 perfmon counter MSR.",null,null],[17,"MSR_C0_PMON_BOX_CTRL","","Uncore C-box 0 perfmon local box control MSR.",null,null],[17,"MSR_C0_PMON_BOX_STATUS","","Uncore C-box 0 perfmon local box status MSR.",null,null],[17,"MSR_C0_PMON_BOX_OVF_CTRL","","Uncore C-box 0 perfmon local box overflow control MSR.",null,null],[17,"MSR_C0_PMON_EVNT_SEL0","","Uncore C-box 0 perfmon event select MSR.",null,null],[17,"MSR_C0_PMON_CTR0","","Uncore C-box 0 perfmon counter MSR.",null,null],[17,"MSR_C0_PMON_EVNT_SEL1","","Uncore C-box 0 perfmon event select MSR.",null,null],[17,"MSR_C0_PMON_CTR1","","Uncore C-box 0 perfmon counter MSR.",null,null],[17,"MSR_C0_PMON_EVNT_SEL2","","Uncore C-box 0 perfmon event select MSR.",null,null],[17,"MSR_C0_PMON_CTR2","","Uncore C-box 0 perfmon counter MSR.",null,null],[17,"MSR_C0_PMON_EVNT_SEL3","","Uncore C-box 0 perfmon event select MSR.",null,null],[17,"MSR_C0_PMON_CTR3","","Uncore C-box 0 perfmon counter MSR.",null,null],[17,"MSR_C0_PMON_EVNT_SEL4","","Uncore C-box 0 perfmon event select MSR.",null,null],[17,"MSR_C0_PMON_CTR4","","Uncore C-box 0 perfmon counter MSR.",null,null],[17,"MSR_C0_PMON_EVNT_SEL5","","Uncore C-box 0 perfmon event select MSR.",null,null],[17,"MSR_C0_PMON_CTR5","","Uncore C-box 0 perfmon counter MSR.",null,null],[17,"MSR_C4_PMON_BOX_CTRL","","Uncore C-box 4 perfmon local box control MSR.",null,null],[17,"MSR_C4_PMON_BOX_STATUS","","Uncore C-box 4 perfmon local box status MSR.",null,null],[17,"MSR_C4_PMON_BOX_OVF_CTRL","","Uncore C-box 4 perfmon local box overflow control MSR.",null,null],[17,"MSR_C4_PMON_EVNT_SEL0","","Uncore C-box 4 perfmon event select MSR.",null,null],[17,"MSR_C4_PMON_CTR0","","Uncore C-box 4 perfmon counter MSR.",null,null],[17,"MSR_C4_PMON_EVNT_SEL1","","Uncore C-box 4 perfmon event select MSR.",null,null],[17,"MSR_C4_PMON_CTR1","","Uncore C-box 4 perfmon counter MSR.",null,null],[17,"MSR_C4_PMON_EVNT_SEL2","","Uncore C-box 4 perfmon event select MSR.",null,null],[17,"MSR_C4_PMON_CTR2","","Uncore C-box 4 perfmon counter MSR.",null,null],[17,"MSR_C4_PMON_EVNT_SEL3","","Uncore C-box 4 perfmon event select MSR.",null,null],[17,"MSR_C4_PMON_CTR3","","Uncore C-box 4 perfmon counter MSR.",null,null],[17,"MSR_C4_PMON_EVNT_SEL4","","Uncore C-box 4 perfmon event select MSR.",null,null],[17,"MSR_C4_PMON_CTR4","","Uncore C-box 4 perfmon counter MSR.",null,null],[17,"MSR_C4_PMON_EVNT_SEL5","","Uncore C-box 4 perfmon event select MSR.",null,null],[17,"MSR_C4_PMON_CTR5","","Uncore C-box 4 perfmon counter MSR.",null,null],[17,"MSR_C2_PMON_BOX_CTRL","","Uncore C-box 2 perfmon local box control MSR.",null,null],[17,"MSR_C2_PMON_BOX_STATUS","","Uncore C-box 2 perfmon local box status MSR.",null,null],[17,"MSR_C2_PMON_BOX_OVF_CTRL","","Uncore C-box 2 perfmon local box overflow control MSR.",null,null],[17,"MSR_C2_PMON_EVNT_SEL0","","Uncore C-box 2 perfmon event select MSR.",null,null],[17,"MSR_C2_PMON_CTR0","","Uncore C-box 2 perfmon counter MSR.",null,null],[17,"MSR_C2_PMON_EVNT_SEL1","","Uncore C-box 2 perfmon event select MSR.",null,null],[17,"MSR_C2_PMON_CTR1","","Uncore C-box 2 perfmon counter MSR.",null,null],[17,"MSR_C2_PMON_EVNT_SEL2","","Uncore C-box 2 perfmon event select MSR.",null,null],[17,"MSR_C2_PMON_CTR2","","Uncore C-box 2 perfmon counter MSR.",null,null],[17,"MSR_C2_PMON_EVNT_SEL3","","Uncore C-box 2 perfmon event select MSR.",null,null],[17,"MSR_C2_PMON_CTR3","","Uncore C-box 2 perfmon counter MSR.",null,null],[17,"MSR_C2_PMON_EVNT_SEL4","","Uncore C-box 2 perfmon event select MSR.",null,null],[17,"MSR_C2_PMON_CTR4","","Uncore C-box 2 perfmon counter MSR.",null,null],[17,"MSR_C2_PMON_EVNT_SEL5","","Uncore C-box 2 perfmon event select MSR.",null,null],[17,"MSR_C2_PMON_CTR5","","Uncore C-box 2 perfmon counter MSR.",null,null],[17,"MSR_C6_PMON_BOX_CTRL","","Uncore C-box 6 perfmon local box control MSR.",null,null],[17,"MSR_C6_PMON_BOX_STATUS","","Uncore C-box 6 perfmon local box status MSR.",null,null],[17,"MSR_C6_PMON_BOX_OVF_CTRL","","Uncore C-box 6 perfmon local box overflow control MSR.",null,null],[17,"MSR_C6_PMON_EVNT_SEL0","","Uncore C-box 6 perfmon event select MSR.",null,null],[17,"MSR_C6_PMON_CTR0","","Uncore C-box 6 perfmon counter MSR.",null,null],[17,"MSR_C6_PMON_EVNT_SEL1","","Uncore C-box 6 perfmon event select MSR.",null,null],[17,"MSR_C6_PMON_CTR1","","Uncore C-box 6 perfmon counter MSR.",null,null],[17,"MSR_C6_PMON_EVNT_SEL2","","Uncore C-box 6 perfmon event select MSR.",null,null],[17,"MSR_C6_PMON_CTR2","","Uncore C-box 6 perfmon counter MSR.",null,null],[17,"MSR_C6_PMON_EVNT_SEL3","","Uncore C-box 6 perfmon event select MSR.",null,null],[17,"MSR_C6_PMON_CTR3","","Uncore C-box 6 perfmon counter MSR.",null,null],[17,"MSR_C6_PMON_EVNT_SEL4","","Uncore C-box 6 perfmon event select MSR.",null,null],[17,"MSR_C6_PMON_CTR4","","Uncore C-box 6 perfmon counter MSR.",null,null],[17,"MSR_C6_PMON_EVNT_SEL5","","Uncore C-box 6 perfmon event select MSR.",null,null],[17,"MSR_C6_PMON_CTR5","","Uncore C-box 6 perfmon counter MSR.",null,null],[17,"MSR_C1_PMON_BOX_CTRL","","Uncore C-box 1 perfmon local box control MSR.",null,null],[17,"MSR_C1_PMON_BOX_STATUS","","Uncore C-box 1 perfmon local box status MSR.",null,null],[17,"MSR_C1_PMON_BOX_OVF_CTRL","","Uncore C-box 1 perfmon local box overflow control MSR.",null,null],[17,"MSR_C1_PMON_EVNT_SEL0","","Uncore C-box 1 perfmon event select MSR.",null,null],[17,"MSR_C1_PMON_CTR0","","Uncore C-box 1 perfmon counter MSR.",null,null],[17,"MSR_C1_PMON_EVNT_SEL1","","Uncore C-box 1 perfmon event select MSR.",null,null],[17,"MSR_C1_PMON_CTR1","","Uncore C-box 1 perfmon counter MSR.",null,null],[17,"MSR_C1_PMON_EVNT_SEL2","","Uncore C-box 1 perfmon event select MSR.",null,null],[17,"MSR_C1_PMON_CTR2","","Uncore C-box 1 perfmon counter MSR.",null,null],[17,"MSR_C1_PMON_EVNT_SEL3","","Uncore C-box 1 perfmon event select MSR.",null,null],[17,"MSR_C1_PMON_CTR3","","Uncore C-box 1 perfmon counter MSR.",null,null],[17,"MSR_C1_PMON_EVNT_SEL4","","Uncore C-box 1 perfmon event select MSR.",null,null],[17,"MSR_C1_PMON_CTR4","","Uncore C-box 1 perfmon counter MSR.",null,null],[17,"MSR_C1_PMON_EVNT_SEL5","","Uncore C-box 1 perfmon event select MSR.",null,null],[17,"MSR_C1_PMON_CTR5","","Uncore C-box 1 perfmon counter MSR.",null,null],[17,"MSR_C5_PMON_BOX_CTRL","","Uncore C-box 5 perfmon local box control MSR.",null,null],[17,"MSR_C5_PMON_BOX_STATUS","","Uncore C-box 5 perfmon local box status MSR.",null,null],[17,"MSR_C5_PMON_BOX_OVF_CTRL","","Uncore C-box 5 perfmon local box overflow control MSR.",null,null],[17,"MSR_C5_PMON_EVNT_SEL0","","Uncore C-box 5 perfmon event select MSR.",null,null],[17,"MSR_C5_PMON_CTR0","","Uncore C-box 5 perfmon counter MSR.",null,null],[17,"MSR_C5_PMON_EVNT_SEL1","","Uncore C-box 5 perfmon event select MSR.",null,null],[17,"MSR_C5_PMON_CTR1","","Uncore C-box 5 perfmon counter MSR.",null,null],[17,"MSR_C5_PMON_EVNT_SEL2","","Uncore C-box 5 perfmon event select MSR.",null,null],[17,"MSR_C5_PMON_CTR2","","Uncore C-box 5 perfmon counter MSR.",null,null],[17,"MSR_C5_PMON_EVNT_SEL3","","Uncore C-box 5 perfmon event select MSR.",null,null],[17,"MSR_C5_PMON_CTR3","","Uncore C-box 5 perfmon counter MSR.",null,null],[17,"MSR_C5_PMON_EVNT_SEL4","","Uncore C-box 5 perfmon event select MSR.",null,null],[17,"MSR_C5_PMON_CTR4","","Uncore C-box 5 perfmon counter MSR.",null,null],[17,"MSR_C5_PMON_EVNT_SEL5","","Uncore C-box 5 perfmon event select MSR.",null,null],[17,"MSR_C5_PMON_CTR5","","Uncore C-box 5 perfmon counter MSR.",null,null],[17,"MSR_C3_PMON_BOX_CTRL","","Uncore C-box 3 perfmon local box control MSR.",null,null],[17,"MSR_C3_PMON_BOX_STATUS","","Uncore C-box 3 perfmon local box status MSR.",null,null],[17,"MSR_C3_PMON_BOX_OVF_CTRL","","Uncore C-box 3 perfmon local box overflow control MSR.",null,null],[17,"MSR_C3_PMON_EVNT_SEL0","","Uncore C-box 3 perfmon event select MSR.",null,null],[17,"MSR_C3_PMON_CTR0","","Uncore C-box 3 perfmon counter MSR.",null,null],[17,"MSR_C3_PMON_EVNT_SEL1","","Uncore C-box 3 perfmon event select MSR.",null,null],[17,"MSR_C3_PMON_CTR1","","Uncore C-box 3 perfmon counter MSR.",null,null],[17,"MSR_C3_PMON_EVNT_SEL2","","Uncore C-box 3 perfmon event select MSR.",null,null],[17,"MSR_C3_PMON_CTR2","","Uncore C-box 3 perfmon counter MSR.",null,null],[17,"MSR_C3_PMON_EVNT_SEL3","","Uncore C-box 3 perfmon event select MSR.",null,null],[17,"MSR_C3_PMON_CTR3","","Uncore C-box 3 perfmon counter MSR.",null,null],[17,"MSR_C3_PMON_EVNT_SEL4","","Uncore C-box 3 perfmon event select MSR.",null,null],[17,"MSR_C3_PMON_CTR4","","Uncore C-box 3 perfmon counter MSR.",null,null],[17,"MSR_C3_PMON_EVNT_SEL5","","Uncore C-box 3 perfmon event select MSR.",null,null],[17,"MSR_C3_PMON_CTR5","","Uncore C-box 3 perfmon counter MSR.",null,null],[17,"MSR_C7_PMON_BOX_CTRL","","Uncore C-box 7 perfmon local box control MSR.",null,null],[17,"MSR_C7_PMON_BOX_STATUS","","Uncore C-box 7 perfmon local box status MSR.",null,null],[17,"MSR_C7_PMON_BOX_OVF_CTRL","","Uncore C-box 7 perfmon local box overflow control MSR.",null,null],[17,"MSR_C7_PMON_EVNT_SEL0","","Uncore C-box 7 perfmon event select MSR.",null,null],[17,"MSR_C7_PMON_CTR0","","Uncore C-box 7 perfmon counter MSR.",null,null],[17,"MSR_C7_PMON_EVNT_SEL1","","Uncore C-box 7 perfmon event select MSR.",null,null],[17,"MSR_C7_PMON_CTR1","","Uncore C-box 7 perfmon counter MSR.",null,null],[17,"MSR_C7_PMON_EVNT_SEL2","","Uncore C-box 7 perfmon event select MSR.",null,null],[17,"MSR_C7_PMON_CTR2","","Uncore C-box 7 perfmon counter MSR.",null,null],[17,"MSR_C7_PMON_EVNT_SEL3","","Uncore C-box 7 perfmon event select MSR.",null,null],[17,"MSR_C7_PMON_CTR3","","Uncore C-box 7 perfmon counter MSR.",null,null],[17,"MSR_C7_PMON_EVNT_SEL4","","Uncore C-box 7 perfmon event select MSR.",null,null],[17,"MSR_C7_PMON_CTR4","","Uncore C-box 7 perfmon counter MSR.",null,null],[17,"MSR_C7_PMON_EVNT_SEL5","","Uncore C-box 7 perfmon event select MSR.",null,null],[17,"MSR_C7_PMON_CTR5","","Uncore C-box 7 perfmon counter MSR.",null,null],[17,"MSR_R0_PMON_BOX_CTRL","","Uncore R-box 0 perfmon local box control MSR.",null,null],[17,"MSR_R0_PMON_BOX_STATUS","","Uncore R-box 0 perfmon local box status MSR.",null,null],[17,"MSR_R0_PMON_BOX_OVF_CTRL","","Uncore R-box 0 perfmon local box overflow control MSR.",null,null],[17,"MSR_R0_PMON_IPERF0_P0","","Uncore R-box 0 perfmon IPERF0 unit Port 0 select MSR.",null,null],[17,"MSR_R0_PMON_IPERF0_P1","","Uncore R-box 0 perfmon IPERF0 unit Port 1 select MSR.",null,null],[17,"MSR_R0_PMON_IPERF0_P2","","Uncore R-box 0 perfmon IPERF0 unit Port 2 select MSR.",null,null],[17,"MSR_R0_PMON_IPERF0_P3","","Uncore R-box 0 perfmon IPERF0 unit Port 3 select MSR.",null,null],[17,"MSR_R0_PMON_IPERF0_P4","","Uncore R-box 0 perfmon IPERF0 unit Port 4 select MSR.",null,null],[17,"MSR_R0_PMON_IPERF0_P5","","Uncore R-box 0 perfmon IPERF0 unit Port 5 select MSR.",null,null],[17,"MSR_R0_PMON_IPERF0_P6","","Uncore R-box 0 perfmon IPERF0 unit Port 6 select MSR.",null,null],[17,"MSR_R0_PMON_IPERF0_P7","","Uncore R-box 0 perfmon IPERF0 unit Port 7 select MSR.",null,null],[17,"MSR_R0_PMON_QLX_P0","","Uncore R-box 0 perfmon QLX unit Port 0 select MSR.",null,null],[17,"MSR_R0_PMON_QLX_P1","","Uncore R-box 0 perfmon QLX unit Port 1 select MSR.",null,null],[17,"MSR_R0_PMON_QLX_P2","","Uncore R-box 0 perfmon QLX unit Port 2 select MSR.",null,null],[17,"MSR_R0_PMON_QLX_P3","","Uncore R-box 0 perfmon QLX unit Port 3 select MSR.",null,null],[17,"MSR_R0_PMON_EVNT_SEL0","","Uncore R-box 0 perfmon event select MSR.",null,null],[17,"MSR_R0_PMON_CTR0","","Uncore R-box 0 perfmon counter MSR.",null,null],[17,"MSR_R0_PMON_EVNT_SEL1","","Uncore R-box 0 perfmon event select MSR.",null,null],[17,"MSR_R0_PMON_CTR1","","Uncore R-box 0 perfmon counter MSR.",null,null],[17,"MSR_R0_PMON_EVNT_SEL2","","Uncore R-box 0 perfmon event select MSR.",null,null],[17,"MSR_R0_PMON_CTR2","","Uncore R-box 0 perfmon counter MSR.",null,null],[17,"MSR_R0_PMON_EVNT_SEL3","","Uncore R-box 0 perfmon event select MSR.",null,null],[17,"MSR_R0_PMON_CTR3","","Uncore R-box 0 perfmon counter MSR.",null,null],[17,"MSR_R0_PMON_EVNT_SEL4","","Uncore R-box 0 perfmon event select MSR.",null,null],[17,"MSR_R0_PMON_CTR4","","Uncore R-box 0 perfmon counter MSR.",null,null],[17,"MSR_R0_PMON_EVNT_SEL5","","Uncore R-box 0 perfmon event select MSR.",null,null],[17,"MSR_R0_PMON_CTR5","","Uncore R-box 0 perfmon counter MSR.",null,null],[17,"MSR_R0_PMON_EVNT_SEL6","","Uncore R-box 0 perfmon event select MSR.",null,null],[17,"MSR_R0_PMON_CTR6","","Uncore R-box 0 perfmon counter MSR.",null,null],[17,"MSR_R0_PMON_EVNT_SEL7","","Uncore R-box 0 perfmon event select MSR.",null,null],[17,"MSR_R0_PMON_CTR7","","Uncore R-box 0 perfmon counter MSR.",null,null],[17,"MSR_R1_PMON_BOX_CTRL","","Uncore R-box 1 perfmon local box control MSR.",null,null],[17,"MSR_R1_PMON_BOX_STATUS","","Uncore R-box 1 perfmon local box status MSR.",null,null],[17,"MSR_R1_PMON_BOX_OVF_CTRL","","Uncore R-box 1 perfmon local box overflow control MSR.",null,null],[17,"MSR_R1_PMON_IPERF1_P8","","Uncore R-box 1 perfmon IPERF1 unit Port 8 select MSR.",null,null],[17,"MSR_R1_PMON_IPERF1_P9","","Uncore R-box 1 perfmon IPERF1 unit Port 9 select MSR.",null,null],[17,"MSR_R1_PMON_IPERF1_P10","","Uncore R-box 1 perfmon IPERF1 unit Port 10 select MSR.",null,null],[17,"MSR_R1_PMON_IPERF1_P11","","Uncore R-box 1 perfmon IPERF1 unit Port 11 select MSR.",null,null],[17,"MSR_R1_PMON_IPERF1_P12","","Uncore R-box 1 perfmon IPERF1 unit Port 12 select MSR.",null,null],[17,"MSR_R1_PMON_IPERF1_P13","","Uncore R-box 1 perfmon IPERF1 unit Port 13 select MSR.",null,null],[17,"MSR_R1_PMON_IPERF1_P14","","Uncore R-box 1 perfmon IPERF1 unit Port 14 select MSR.",null,null],[17,"MSR_R1_PMON_IPERF1_P15","","Uncore R-box 1 perfmon IPERF1 unit Port 15 select MSR.",null,null],[17,"MSR_R1_PMON_QLX_P4","","Uncore R-box 1 perfmon QLX unit Port 4 select MSR.",null,null],[17,"MSR_R1_PMON_QLX_P5","","Uncore R-box 1 perfmon QLX unit Port 5 select MSR.",null,null],[17,"MSR_R1_PMON_QLX_P6","","Uncore R-box 1 perfmon QLX unit Port 6 select MSR.",null,null],[17,"MSR_R1_PMON_QLX_P7","","Uncore R-box 1 perfmon QLX unit Port 7 select MSR.",null,null],[17,"MSR_R1_PMON_EVNT_SEL8","","Uncore R-box 1 perfmon event select MSR.",null,null],[17,"MSR_R1_PMON_CTR8","","Uncore R-box 1 perfmon counter MSR.",null,null],[17,"MSR_R1_PMON_EVNT_SEL9","","Uncore R-box 1 perfmon event select MSR.",null,null],[17,"MSR_R1_PMON_CTR9","","Uncore R-box 1 perfmon counter MSR.",null,null],[17,"MSR_R1_PMON_EVNT_SEL10","","Uncore R-box 1 perfmon event select MSR.",null,null],[17,"MSR_R1_PMON_CTR10","","Uncore R-box 1 perfmon counter MSR.",null,null],[17,"MSR_R1_PMON_EVNT_SEL11","","Uncore R-box 1 perfmon event select MSR.",null,null],[17,"MSR_R1_PMON_CTR11","","Uncore R-box 1 perfmon counter MSR.",null,null],[17,"MSR_R1_PMON_EVNT_SEL12","","Uncore R-box 1 perfmon event select MSR.",null,null],[17,"MSR_R1_PMON_CTR12","","Uncore R-box 1 perfmon counter MSR.",null,null],[17,"MSR_R1_PMON_EVNT_SEL13","","Uncore R-box 1 perfmon event select MSR.",null,null],[17,"MSR_R1_PMON_CTR13","","Uncore R-box 1perfmon counter MSR.",null,null],[17,"MSR_R1_PMON_EVNT_SEL14","","Uncore R-box 1 perfmon event select MSR.",null,null],[17,"MSR_R1_PMON_CTR14","","Uncore R-box 1 perfmon counter MSR.",null,null],[17,"MSR_R1_PMON_EVNT_SEL15","","Uncore R-box 1 perfmon event select MSR.",null,null],[17,"MSR_R1_PMON_CTR15","","Uncore R-box 1 perfmon counter MSR.",null,null],[17,"MSR_B0_PMON_MATCH","","Uncore B-box 0 perfmon local box match MSR.",null,null],[17,"MSR_B0_PMON_MASK","","Uncore B-box 0 perfmon local box mask MSR.",null,null],[17,"MSR_S0_PMON_MATCH","","Uncore S-box 0 perfmon local box match MSR.",null,null],[17,"MSR_S0_PMON_MASK","","Uncore S-box 0 perfmon local box mask MSR.",null,null],[17,"MSR_B1_PMON_MATCH","","Uncore B-box 1 perfmon local box match MSR.",null,null],[17,"MSR_B1_PMON_MASK","","Uncore B-box 1 perfmon local box mask MSR.",null,null],[17,"MSR_M0_PMON_MM_CONFIG","","Uncore M-box 0 perfmon local box address match/mask config MSR.",null,null],[17,"MSR_M0_PMON_ADDR_MATCH","","Uncore M-box 0 perfmon local box address match MSR.",null,null],[17,"MSR_M0_PMON_ADDR_MASK","","Uncore M-box 0 perfmon local box address mask MSR.",null,null],[17,"MSR_S1_PMON_MATCH","","Uncore S-box 1 perfmon local box match MSR.",null,null],[17,"MSR_S1_PMON_MASK","","Uncore S-box 1 perfmon local box mask MSR.",null,null],[17,"MSR_M1_PMON_MM_CONFIG","","Uncore M-box 1 perfmon local box address match/mask config MSR.",null,null],[17,"MSR_M1_PMON_ADDR_MATCH","","Uncore M-box 1 perfmon local box address match MSR.",null,null],[17,"MSR_M1_PMON_ADDR_MASK","","Uncore M-box 1 perfmon local box address mask MSR.",null,null],[17,"MSR_C8_PMON_BOX_CTRL","","Uncore C-box 8 perfmon local box control MSR.",null,null],[17,"MSR_C8_PMON_BOX_STATUS","","Uncore C-box 8 perfmon local box status MSR.",null,null],[17,"MSR_C8_PMON_BOX_OVF_CTRL","","Uncore C-box 8 perfmon local box overflow control MSR.",null,null],[17,"MSR_C8_PMON_EVNT_SEL0","","Uncore C-box 8 perfmon event select MSR.",null,null],[17,"MSR_C8_PMON_CTR0","","Uncore C-box 8 perfmon counter MSR.",null,null],[17,"MSR_C8_PMON_EVNT_SEL1","","Uncore C-box 8 perfmon event select MSR.",null,null],[17,"MSR_C8_PMON_CTR1","","Uncore C-box 8 perfmon counter MSR.",null,null],[17,"MSR_C8_PMON_EVNT_SEL2","","Uncore C-box 8 perfmon event select MSR.",null,null],[17,"MSR_C8_PMON_CTR2","","Uncore C-box 8 perfmon counter MSR.",null,null],[17,"MSR_C8_PMON_EVNT_SEL3","","Uncore C-box 8 perfmon event select MSR.",null,null],[17,"MSR_C8_PMON_CTR3","","Uncore C-box 8 perfmon counter MSR.",null,null],[17,"MSR_C8_PMON_EVNT_SEL4","","Uncore C-box 8 perfmon event select MSR.",null,null],[17,"MSR_C8_PMON_CTR4","","Uncore C-box 8 perfmon counter MSR.",null,null],[17,"MSR_C8_PMON_EVNT_SEL5","","Uncore C-box 8 perfmon event select MSR.",null,null],[17,"MSR_C8_PMON_CTR5","","Uncore C-box 8 perfmon counter MSR.",null,null],[17,"MSR_C9_PMON_BOX_CTRL","","Uncore C-box 9 perfmon local box control MSR.",null,null],[17,"MSR_C9_PMON_BOX_STATUS","","Uncore C-box 9 perfmon local box status MSR.",null,null],[17,"MSR_C9_PMON_BOX_OVF_CTRL","","Uncore C-box 9 perfmon local box overflow control MSR.",null,null],[17,"MSR_C9_PMON_EVNT_SEL0","","Uncore C-box 9 perfmon event select MSR.",null,null],[17,"MSR_C9_PMON_CTR0","","Uncore C-box 9 perfmon counter MSR.",null,null],[17,"MSR_C9_PMON_EVNT_SEL1","","Uncore C-box 9 perfmon event select MSR.",null,null],[17,"MSR_C9_PMON_CTR1","","Uncore C-box 9 perfmon counter MSR.",null,null],[17,"MSR_C9_PMON_EVNT_SEL2","","Uncore C-box 9 perfmon event select MSR.",null,null],[17,"MSR_C9_PMON_CTR2","","Uncore C-box 9 perfmon counter MSR.",null,null],[17,"MSR_C9_PMON_EVNT_SEL3","","Uncore C-box 9 perfmon event select MSR.",null,null],[17,"MSR_C9_PMON_CTR3","","Uncore C-box 9 perfmon counter MSR.",null,null],[17,"MSR_C9_PMON_EVNT_SEL4","","Uncore C-box 9 perfmon event select MSR.",null,null],[17,"MSR_C9_PMON_CTR4","","Uncore C-box 9 perfmon counter MSR.",null,null],[17,"MSR_C9_PMON_EVNT_SEL5","","Uncore C-box 9 perfmon event select MSR.",null,null],[17,"MSR_C9_PMON_CTR5","","Uncore C-box 9 perfmon counter MSR.",null,null],[17,"MSR_EMON_L3_CTR_CTL0","","GBUSQ Event Control and Counter  Register (R/W) See Section 18.17, Performance  Monitoring on 64-bit Intel Xeon Processor MP with Up to 8-MByte L3 Cache.",null,null],[17,"MSR_IFSB_BUSQ0","","IFSB BUSQ Event Control and Counter  Register (R/W) See Section 18.17, Performance  Monitoring on 64-bit Intel Xeon Processor  MP with Up to 8-MByte L3 Cache.",null,null],[17,"MSR_EMON_L3_CTR_CTL1","","GBUSQ Event Control/Counter Register (R/W) Apply to Intel Xeon processor 7400 series (processor signature  06_1D) only. See Section 17.2.2",null,null],[17,"MSR_IFSB_BUSQ1","","IFSB BUSQ Event Control and Counter Register (R/W)",null,null],[17,"MSR_EMON_L3_CTR_CTL2","","GSNPQ Event Control and Counter  Register (R/W)  See Section 18.17, Performance Monitoring on 64-bit Intel Xeon Processor MP with Up to 8-MByte L3 Cache.",null,null],[17,"MSR_IFSB_SNPQ0","","IFSB SNPQ Event Control and Counter  Register (R/W)  See Section 18.17, Performance  Monitoring on 64-bit Intel Xeon Processor  MP with Up to 8-MByte L3 Cache.",null,null],[17,"MSR_EMON_L3_CTR_CTL3","","GSNPQ Event Control/Counter Register (R/W) Apply to Intel Xeon processor 7400 series (processor signature  06_1D) only. See Section 17.2.2",null,null],[17,"MSR_IFSB_SNPQ1","","IFSB SNPQ Event Control and Counter  Register (R/W)",null,null],[17,"MSR_EFSB_DRDY0","","EFSB DRDY Event Control and Counter Register (R/W)  See Section 18.17, Performance  Monitoring on 64-bit Intel Xeon Processor MP with Up to 8-MByte L3 Cache  for  details.",null,null],[17,"MSR_EMON_L3_CTR_CTL4","","FSB Event Control and Counter Register (R/W)  See Section 18.17, Performance  Monitoring on 64-bit Intel Xeon Processor MP with Up to 8-MByte L3 Cache  for  details.",null,null],[17,"MSR_EFSB_DRDY1","","EFSB DRDY Event Control and Counter  Register (R/W)",null,null],[17,"MSR_EMON_L3_CTR_CTL5","","FSB Event Control/Counter Register (R/W) Apply to Intel Xeon processor 7400 series (processor signature  06_1D) only. See Section 17.2.2",null,null],[17,"MSR_EMON_L3_CTR_CTL6","","FSB Event Control/Counter Register (R/W) Apply to Intel Xeon processor 7400 series (processor signature  06_1D) only. See Section 17.2.2",null,null],[17,"MSR_IFSB_CTL6","","IFSB Latency Event Control Register  (R/W) See Section 18.17, Performance  Monitoring on 64-bit Intel Xeon Processor MP with Up to 8-MByte L3 Cache  for  details.",null,null],[17,"MSR_EMON_L3_CTR_CTL7","","FSB Event Control/Counter Register (R/W) Apply to Intel Xeon processor 7400 series (processor signature  06_1D) only. See Section 17.2.2",null,null],[17,"MSR_IFSB_CNTR7","","IFSB Latency Event Counter Register  (R/W)  See Section 18.17, Performance  Monitoring on 64-bit Intel Xeon Processor  MP with Up to 8-MByte L3 Cache.",null,null],[17,"MSR_EMON_L3_GL_CTL","","L3/FSB Common Control Register (R/W) Apply to Intel Xeon processor 7400 series (processor signature  06_1D) only. See Section 17.2.2",null,null],[17,"IA32_EFER","","If (  CPUID.80000001.EDX.[bit  20] or  CPUID.80000001.EDX.[bit 29])",null,null],[17,"IA32_STAR","","System Call Target Address (R/W)  See Table 35-2.",null,null],[17,"IA32_LSTAR","","IA-32e Mode System Call Target Address (R/W)  See Table 35-2.",null,null],[17,"IA32_FMASK","","System Call Flag Mask (R/W)  See Table 35-2.",null,null],[17,"IA32_FS_BASE","","Map of BASE Address of FS (R/W)  See Table 35-2.",null,null],[17,"IA32_GS_BASE","","Map of BASE Address of GS (R/W)  See Table 35-2.",null,null],[17,"IA32_KERNEL_GS_BASE","","If  CPUID.80000001.EDX.[bit  29] = 1",null,null],[17,"IA32_KERNEL_GSBASE","","Swap Target of BASE Address of GS (R/W) See Table 35-2.",null,null],[17,"IA32_TSC_AUX","","AUXILIARY TSC Signature. (R/W) See Table 35-2 and Section  17.13.2, IA32_TSC_AUX Register and RDTSCP Support.",null,null],[0,"time","x86","Functions to read time stamp counters on x86.",null,null],[5,"rdtsc","x86::time","Read the time stamp counter.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"rdtscp","","Read the time stamp counter.",null,{"inputs":[],"output":{"name":"u64"}}],[0,"irq","x86","Interrupt description and set-up code.",null,null],[3,"InterruptDescription","x86::irq","x86 Exception description (see also Intel Vol. 3a Chapter 6).",null,null],[12,"vector","","",1,null],[12,"mnemonic","","",1,null],[12,"description","","",1,null],[12,"irqtype","","",1,null],[12,"source","","",1,null],[3,"IdtEntry","","A struct describing an interrupt gate.  See the Intel manual mentioned\nabove for details, specifically, the section \"6.14.1 64-Bit Mode IDT\"\nand \"Table 3-2. System-Segment and Gate-Descriptor Types\".",null,null],[12,"base_lo","","Lower 16 bits of ISR.",2,null],[12,"sel","","Segment selector.",2,null],[12,"res0","","This must always be zero.",2,null],[12,"flags","","Flags.",2,null],[12,"base_hi","","The upper 48 bits of ISR (the last 16 bits must be zero).",2,null],[12,"res1","","Must be zero.",2,null],[3,"PageFaultError","","",null,null],[5,"enable","","Enable Interrupts.",null,{"inputs":[],"output":null}],[5,"disable","","Disable Interrupts.",null,{"inputs":[],"output":null}],[7,"EXCEPTIONS","","x86 External Interrupts (1-16).",null,null],[17,"PFAULT_ERROR_P","","0: The fault was caused by a non-present page.\n1: The fault was caused by a page-level protection violation",null,null],[17,"PFAULT_ERROR_WR","","0: The access causing the fault was a read.\n1: The access causing the fault was a write.",null,null],[17,"PFAULT_ERROR_US","","0: The access causing the fault originated when the processor\nwas executing in supervisor mode.\n1: The access causing the fault originated when the processor\nwas executing in user mode.",null,null],[17,"PFAULT_ERROR_RSVD","","0: The fault was not caused by reserved bit violation.\n1: The fault was caused by reserved bits set to 1 in a page directory.",null,null],[17,"PFAULT_ERROR_ID","","0: The fault was not caused by an instruction fetch.\n1: The fault was caused by an instruction fetch.",null,null],[17,"PFAULT_ERROR_PK","","0: The fault was not by protection keys.\n1: There was a protection key violation.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"interruptdescription"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"interruptdescription"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"idtentry"}],"output":{"name":"idtentry"}}],[11,"fmt","","",2,{"inputs":[{"name":"idtentry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"missing","","Create a \"missing\" IdtEntry.  This is a `const` function, so we can\ncall it at compile time to initialize static variables.",2,{"inputs":[{"name":"idtentry"}],"output":{"name":"idtentry"}}],[11,"interrupt_gate","","Create a new IdtEntry pointing at `handler`, which must be a\nfunction with interrupt calling conventions.  (This must be\ncurrently defined in assembly language.)  The `gdt_code_selector`\nvalue must be the offset of code segment entry in the GDT.",2,null],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"eq","","",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",3,{"inputs":[{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"all","","Returns the set containing all flags.",3,{"inputs":[{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"bits","","Returns the raw value of the flags currently stored.",3,{"inputs":[{"name":"pagefaulterror"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",3,{"inputs":[{"name":"pagefaulterror"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",3,{"inputs":[{"name":"pagefaulterror"},{"name":"u32"}],"output":{"name":"pagefaulterror"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",3,{"inputs":[{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",3,{"inputs":[{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"sub","","Returns the set difference of the two sets of flags.",3,{"inputs":[{"name":"pagefaulterror"},{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"not","","Returns the complement of this set of flags.",3,{"inputs":[{"name":"pagefaulterror"}],"output":{"name":"pagefaulterror"}}],[11,"fmt","","",3,{"inputs":[{"name":"pagefaulterror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"rflags","x86","Description of RFlag values that store the results of operations and the state of the processor.",null,null],[3,"RFlags","x86::rflags","",null,null],[17,"RFLAGS_ID","","ID Flag (ID)",null,null],[17,"RFLAGS_VIP","","Virtual Interrupt Pending (VIP)",null,null],[17,"RFLAGS_VIF","","Virtual Interrupt Flag (VIF)",null,null],[17,"RFLAGS_AC","","Alignment Check (AC)",null,null],[17,"RFLAGS_VM","","Virtual-8086 Mode (VM)",null,null],[17,"RFLAGS_RF","","Resume Flag (RF)",null,null],[17,"RFLAGS_NT","","Nested Task (NT)",null,null],[17,"RFLAGS_IOPL0","","I/O Privilege Level (IOPL) 0",null,null],[17,"RFLAGS_IOPL1","","I/O Privilege Level (IOPL) 1",null,null],[17,"RFLAGS_IOPL2","","I/O Privilege Level (IOPL) 2",null,null],[17,"RFLAGS_IOPL3","","I/O Privilege Level (IOPL) 3",null,null],[17,"RFLAGS_OF","","Overflow Flag (OF)",null,null],[17,"RFLAGS_DF","","Direction Flag (DF)",null,null],[17,"RFLAGS_IF","","Interrupt Enable Flag (IF)",null,null],[17,"RFLAGS_TF","","Trap Flag (TF)",null,null],[17,"RFLAGS_SF","","Sign Flag (SF)",null,null],[17,"RFLAGS_ZF","","Zero Flag (ZF)",null,null],[17,"RFLAGS_AF","","Auxiliary Carry Flag (AF)",null,null],[17,"RFLAGS_PF","","Parity Flag (PF)",null,null],[17,"RFLAGS_A1","","Bit 1 is always 1.",null,null],[17,"RFLAGS_CF","","Carry Flag (CF)",null,null],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"eq","","",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",4,{"inputs":[{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"all","","Returns the set containing all flags.",4,{"inputs":[{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",4,{"inputs":[{"name":"rflags"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",4,{"inputs":[{"name":"rflags"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",4,{"inputs":[{"name":"rflags"},{"name":"u64"}],"output":{"name":"rflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",4,{"inputs":[{"name":"rflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",4,{"inputs":[{"name":"rflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",4,{"inputs":[{"name":"rflags"},{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"not","","Returns the complement of this set of flags.",4,{"inputs":[{"name":"rflags"}],"output":{"name":"rflags"}}],[11,"new","","Creates a new RFlags entry. Ensures bit 1 is set.",4,{"inputs":[{"name":"rflags"}],"output":{"name":"rflags"}}],[0,"paging","x86","Description of the data-structures for IA-32e paging mode.",null,null],[3,"PML4Entry","x86::paging","",null,null],[3,"PDPTEntry","","",null,null],[3,"PDEntry","","",null,null],[3,"PTEntry","","",null,null],[5,"pml4_index","","Given virtual address calculate corresponding entry in PML4.",null,{"inputs":[{"name":"vaddr"}],"output":{"name":"usize"}}],[5,"pdpt_index","","Given virtual address calculate corresponding entry in PDPT.",null,{"inputs":[{"name":"vaddr"}],"output":{"name":"usize"}}],[5,"pd_index","","Given virtual address calculate corresponding entry in PD.",null,{"inputs":[{"name":"vaddr"}],"output":{"name":"usize"}}],[5,"pt_index","","Given virtual address calculate corresponding entry in PT.",null,{"inputs":[{"name":"vaddr"}],"output":{"name":"usize"}}],[6,"PAddr","","",null,null],[6,"VAddr","","",null,null],[6,"PML4","","A PML4 table.\nIn practice this has only 4 entries but it still needs to be the size of a 4K page.",null,null],[6,"PDPT","","A page directory pointer table.",null,null],[6,"PD","","A page directory.",null,null],[6,"PT","","A page table.",null,null],[17,"BASE_PAGE_SIZE","","",null,null],[17,"LARGE_PAGE_SIZE","","",null,null],[17,"HUGE_PAGE_SIZE","","",null,null],[17,"CACHE_LINE_SIZE","","",null,null],[17,"MAXPHYADDR","","MAXPHYADDR, which is at most 52; (use CPUID for finding system value).",null,null],[17,"PML4_P","","Present; must be 1 to reference a page-directory-pointer table",null,null],[17,"PML4_RW","","Read/write; if 0, writes may not be allowed to the 512-GByte region\ncontrolled by this entry (see Section 4.6)",null,null],[17,"PML4_US","","User/supervisor; if 0, user-mode accesses are not allowed\nto the 512-GByte region controlled by this entry.",null,null],[17,"PML4_PWT","","Page-level write-through; indirectly determines the memory type used to\naccess the page-directory-pointer table referenced by this entry.",null,null],[17,"PML4_PCD","","Page-level cache disable; indirectly determines the memory type used to\naccess the page-directory-pointer table referenced by this entry.",null,null],[17,"PML4_A","","Accessed; indicates whether this entry has been used for linear-address translation.",null,null],[17,"PML4_XD","","If IA32_EFER.NXE = 1, execute-disable\nIf 1, instruction fetches are not allowed from the 512-GByte region.",null,null],[17,"PDPT_P","","Present; must be 1 to map a 1-GByte page or reference a page directory.",null,null],[17,"PDPT_RW","","Read/write; if 0, writes may not be allowed to the 1-GByte region controlled by this entry",null,null],[17,"PDPT_US","","User/supervisor; user-mode accesses are not allowed to the 1-GByte region controlled by this entry.",null,null],[17,"PDPT_PWT","","Page-level write-through.",null,null],[17,"PDPT_PCD","","Page-level cache disable.",null,null],[17,"PDPT_A","","Accessed; if PDPT_PS set indicates whether software has accessed the 1-GByte page\nelse indicates whether this entry has been used for linear-address translation",null,null],[17,"PDPT_D","","Dirty; if PDPT_PS indicates whether software has written to the 1-GByte page referenced by this entry.\nelse ignored.",null,null],[17,"PDPT_PS","","Page size; if set this entry maps a 1-GByte page; otherwise, this entry references a page directory.\nif not PDPT_PS this is ignored.",null,null],[17,"PDPT_G","","Global; if PDPT_PS && CR4.PGE = 1, determines whether the translation is global; ignored otherwise\nif not PDPT_PS this is ignored.",null,null],[17,"PDPT_PAT","","Indirectly determines the memory type used to access the 1-GByte page referenced by this entry.",null,null],[17,"PDPT_XD","","If IA32_EFER.NXE = 1, execute-disable\nIf 1, instruction fetches are not allowed from the 512-GByte region.",null,null],[17,"PD_P","","Present; must be 1 to map a 2-MByte page or reference a page table.",null,null],[17,"PD_RW","","Read/write; if 0, writes may not be allowed to the 2-MByte region controlled by this entry",null,null],[17,"PD_US","","User/supervisor; user-mode accesses are not allowed to the 2-MByte region controlled by this entry.",null,null],[17,"PD_PWT","","Page-level write-through.",null,null],[17,"PD_PCD","","Page-level cache disable.",null,null],[17,"PD_A","","Accessed; if PD_PS set indicates whether software has accessed the 2-MByte page\nelse indicates whether this entry has been used for linear-address translation",null,null],[17,"PD_D","","Dirty; if PD_PS indicates whether software has written to the 2-MByte page referenced by this entry.\nelse ignored.",null,null],[17,"PD_PS","","Page size; if set this entry maps a 2-MByte page; otherwise, this entry references a page directory.",null,null],[17,"PD_G","","Global; if PD_PS && CR4.PGE = 1, determines whether the translation is global; ignored otherwise\nif not PD_PS this is ignored.",null,null],[17,"PD_PAT","","Indirectly determines the memory type used to access the 2-MByte page referenced by this entry.\nif not PD_PS this is ignored.",null,null],[17,"PD_XD","","If IA32_EFER.NXE = 1, execute-disable\nIf 1, instruction fetches are not allowed from the 512-GByte region.",null,null],[17,"PT_P","","Present; must be 1 to map a 4-KByte page.",null,null],[17,"PT_RW","","Read/write; if 0, writes may not be allowed to the 4-KByte region controlled by this entry",null,null],[17,"PT_US","","User/supervisor; user-mode accesses are not allowed to the 4-KByte region controlled by this entry.",null,null],[17,"PT_PWT","","Page-level write-through.",null,null],[17,"PT_PCD","","Page-level cache disable.",null,null],[17,"PT_A","","Accessed; indicates whether software has accessed the 4-KByte page",null,null],[17,"PT_D","","Dirty; indicates whether software has written to the 4-KByte page referenced by this entry.",null,null],[17,"PT_G","","Global; if CR4.PGE = 1, determines whether the translation is global (see Section 4.10); ignored otherwise",null,null],[17,"PT_XD","","If IA32_EFER.NXE = 1, execute-disable\nIf 1, instruction fetches are not allowed from the 512-GByte region.",null,null],[11,"hash","","",5,null],[11,"cmp","","",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"eq","","",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",5,{"inputs":[{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"all","","Returns the set containing all flags.",5,{"inputs":[{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"bits","","Returns the raw value of the flags currently stored.",5,{"inputs":[{"name":"pml4entry"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",5,{"inputs":[{"name":"pml4entry"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",5,{"inputs":[{"name":"pml4entry"},{"name":"u64"}],"output":{"name":"pml4entry"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",5,{"inputs":[{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",5,{"inputs":[{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"sub","","Returns the set difference of the two sets of flags.",5,{"inputs":[{"name":"pml4entry"},{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"not","","Returns the complement of this set of flags.",5,{"inputs":[{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"new","","Creates a new PML4Entry.",5,{"inputs":[{"name":"pml4entry"},{"name":"paddr"},{"name":"pml4entry"}],"output":{"name":"pml4entry"}}],[11,"get_address","","Retrieves the physical address in this entry.",5,{"inputs":[{"name":"pml4entry"}],"output":{"name":"paddr"}}],[11,"is_present","","Convenience function to check if the present bit is set.",5,{"inputs":[{"name":"pml4entry"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"pml4entry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"cmp","","",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"eq","","",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",6,{"inputs":[{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"all","","Returns the set containing all flags.",6,{"inputs":[{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"bits","","Returns the raw value of the flags currently stored.",6,{"inputs":[{"name":"pdptentry"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",6,{"inputs":[{"name":"pdptentry"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",6,{"inputs":[{"name":"pdptentry"},{"name":"u64"}],"output":{"name":"pdptentry"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,{"inputs":[{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",6,{"inputs":[{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"sub","","Returns the set difference of the two sets of flags.",6,{"inputs":[{"name":"pdptentry"},{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"not","","Returns the complement of this set of flags.",6,{"inputs":[{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"new","","Creates a new PDPTEntry.",6,{"inputs":[{"name":"pdptentry"},{"name":"paddr"},{"name":"pdptentry"}],"output":{"name":"pdptentry"}}],[11,"get_address","","Retrieves the physical address in this entry.",6,{"inputs":[{"name":"pdptentry"}],"output":{"name":"paddr"}}],[11,"is_present","","Convenience function to check if the present bit is set.",6,{"inputs":[{"name":"pdptentry"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"pdptentry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"cmp","","",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"eq","","",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",7,{"inputs":[{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"all","","Returns the set containing all flags.",7,{"inputs":[{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"bits","","Returns the raw value of the flags currently stored.",7,{"inputs":[{"name":"pdentry"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",7,{"inputs":[{"name":"pdentry"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",7,{"inputs":[{"name":"pdentry"},{"name":"u64"}],"output":{"name":"pdentry"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,{"inputs":[{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",7,{"inputs":[{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"sub","","Returns the set difference of the two sets of flags.",7,{"inputs":[{"name":"pdentry"},{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"not","","Returns the complement of this set of flags.",7,{"inputs":[{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"new","","Creates a new PDEntry.",7,{"inputs":[{"name":"pdentry"},{"name":"paddr"},{"name":"pdentry"}],"output":{"name":"pdentry"}}],[11,"get_address","","Retrieves the physical address in this entry.",7,{"inputs":[{"name":"pdentry"}],"output":{"name":"paddr"}}],[11,"is_present","","Convenience function to check if the present bit is set.",7,{"inputs":[{"name":"pdentry"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"pdentry"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"cmp","","",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"eq","","",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",8,{"inputs":[{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"all","","Returns the set containing all flags.",8,{"inputs":[{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"bits","","Returns the raw value of the flags currently stored.",8,{"inputs":[{"name":"ptentry"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",8,{"inputs":[{"name":"ptentry"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",8,{"inputs":[{"name":"ptentry"},{"name":"u64"}],"output":{"name":"ptentry"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,{"inputs":[{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",8,{"inputs":[{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"sub","","Returns the set difference of the two sets of flags.",8,{"inputs":[{"name":"ptentry"},{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"not","","Returns the complement of this set of flags.",8,{"inputs":[{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"new","","Creates a new PTEntry.",8,{"inputs":[{"name":"ptentry"},{"name":"paddr"},{"name":"ptentry"}],"output":{"name":"ptentry"}}],[11,"get_address","","Retrieves the physical address in this entry.",8,{"inputs":[{"name":"ptentry"}],"output":{"name":"paddr"}}],[11,"is_present","","Convenience function to check if the present bit is set.",8,{"inputs":[{"name":"ptentry"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"ptentry"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"segmentation","x86","Program x86 segmentation hardware.",null,null],[3,"SegmentSelector","x86::segmentation","",null,null],[3,"SegmentDescriptor","","",null,null],[5,"load_ss","","Reload stack segment register.",null,{"inputs":[{"name":"segmentselector"}],"output":null}],[5,"load_ds","","Reload data segment register.",null,{"inputs":[{"name":"segmentselector"}],"output":null}],[5,"load_es","","Reload fs segment register.",null,{"inputs":[{"name":"segmentselector"}],"output":null}],[5,"load_fs","","Reload fs segment register.",null,{"inputs":[{"name":"segmentselector"}],"output":null}],[5,"load_gs","","Reload gs segment register.",null,{"inputs":[{"name":"segmentselector"}],"output":null}],[5,"load_cs","","Reload code segment register.\nNote this is special since we can not directly move\nto %cs. Instead we push the new segment selector\nand return value on the stack and use lretq\nto reload cs and continue at 1:.",null,{"inputs":[{"name":"segmentselector"}],"output":null}],[17,"RPL_0","","Requestor Privilege Level",null,null],[17,"RPL_1","","",null,null],[17,"RPL_2","","",null,null],[17,"RPL_3","","",null,null],[17,"TI_GDT","","Table Indicator (TI) 0 means GDT is used.",null,null],[17,"TI_LDT","","Table Indicator (TI) 1 means LDT is used.",null,null],[17,"DESC_S","","Descriptor type (0 = system; 1 = code or data).",null,null],[17,"DESC_DPL0","","Descriptor privilege level 0.",null,null],[17,"DESC_DPL1","","Descriptor privilege level 1.",null,null],[17,"DESC_DPL2","","Descriptor privilege level 2.",null,null],[17,"DESC_DPL3","","Descriptor privilege level 3.",null,null],[17,"DESC_P","","Descriptor is Present.",null,null],[17,"DESC_AVL","","Available for use by system software.",null,null],[17,"DESC_L","","64-bit code segment (IA-32e mode only).",null,null],[17,"DESC_DB","","Default operation size (0 = 16-bit segment, 1 = 32-bit segment)",null,null],[17,"DESC_G","","Granularity.",null,null],[17,"TYPE_SYS_LDT","","",null,null],[17,"TYPE_SYS_TSS_AVAILABLE","","",null,null],[17,"TYPE_SYS_TSS_BUSY","","",null,null],[17,"TYPE_SYS_CALL_GATE","","",null,null],[17,"TYPE_SYS_INTERRUPT_GATE","","",null,null],[17,"TYPE_SYS_TRAP_GATE","","",null,null],[17,"TYPE_D_RO","","Data Read-Only",null,null],[17,"TYPE_D_ROA","","Data Read-Only, accessed",null,null],[17,"TYPE_D_RW","","Data Read/Write",null,null],[17,"TYPE_D_RWA","","Data Read/Write, accessed",null,null],[17,"TYPE_D_ROEXD","","Data Read-Only, expand-down",null,null],[17,"TYPE_D_ROEXDA","","Data Read-Only, expand-down, accessed",null,null],[17,"TYPE_D_RWEXD","","Data Read/Write, expand-down",null,null],[17,"TYPE_D_RWEXDA","","Data Read/Write, expand-down, accessed",null,null],[17,"TYPE_C_EO","","Code Execute-Only",null,null],[17,"TYPE_C_EOA","","Code Execute-Only, accessed",null,null],[17,"TYPE_C_ER","","Code Execute/Read",null,null],[17,"TYPE_C_ERA","","Code Execute/Read, accessed",null,null],[17,"TYPE_C_EOC","","Code Execute-Only, conforming",null,null],[17,"TYPE_C_EOCA","","Code Execute-Only, conforming, accessed",null,null],[17,"TYPE_C_ERC","","Code Execute/Read, conforming",null,null],[17,"TYPE_C_ERCA","","Code Execute/Read, conforming, accessed",null,null],[11,"hash","","",9,null],[11,"cmp","","",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"eq","","",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",9,{"inputs":[{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"all","","Returns the set containing all flags.",9,{"inputs":[{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"bits","","Returns the raw value of the flags currently stored.",9,{"inputs":[{"name":"segmentselector"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",9,{"inputs":[{"name":"segmentselector"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",9,{"inputs":[{"name":"segmentselector"},{"name":"u16"}],"output":{"name":"segmentselector"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,{"inputs":[{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",9,{"inputs":[{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"sub","","Returns the set difference of the two sets of flags.",9,{"inputs":[{"name":"segmentselector"},{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"not","","Returns the complement of this set of flags.",9,{"inputs":[{"name":"segmentselector"}],"output":{"name":"segmentselector"}}],[11,"new","","Create a new SegmentSelector",9,{"inputs":[{"name":"segmentselector"},{"name":"u16"}],"output":{"name":"segmentselector"}}],[11,"from_raw","","",9,{"inputs":[{"name":"segmentselector"},{"name":"u16"}],"output":{"name":"segmentselector"}}],[11,"fmt","","",9,{"inputs":[{"name":"segmentselector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"cmp","","",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"eq","","",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"empty","","Returns an empty set of flags.",10,{"inputs":[{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"all","","Returns the set containing all flags.",10,{"inputs":[{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"bits","","Returns the raw value of the flags currently stored.",10,{"inputs":[{"name":"segmentdescriptor"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"u64"}],"output":{"name":"segmentdescriptor"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,{"inputs":[{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",10,{"inputs":[{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"sub","","Returns the set difference of the two sets of flags.",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"not","","Returns the complement of this set of flags.",10,{"inputs":[{"name":"segmentdescriptor"}],"output":{"name":"segmentdescriptor"}}],[11,"new","","",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"u32"},{"name":"u32"}],"output":{"name":"segmentdescriptor"}}],[11,"fmt","","",10,{"inputs":[{"name":"segmentdescriptor"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"task","x86","Helpers to program the task state segment.",null,null],[3,"TaskStateSegment","x86::task","In 64-bit mode the TSS holds information that is not\ndirectly related to the task-switch mechanism,\nbut is used for finding kernel level stack\nif interrupts arrive while in kernel mode.",null,null],[12,"reserved","","",11,null],[12,"rsp","","The full 64-bit canonical forms of the stack pointers (RSP) for privilege levels 0-2.",11,null],[12,"reserved2","","",11,null],[12,"ist","","The full 64-bit canonical forms of the interrupt stack table (IST) pointers.",11,null],[12,"reserved3","","",11,null],[12,"reserved4","","",11,null],[12,"iomap_base","","The 16-bit offset to the I/O permission bit map from the 64-bit TSS base.",11,null],[5,"load_ltr","","Load the task state register.",null,{"inputs":[{"name":"segmentselector"}],"output":null}],[6,"TaskStateDescriptorLow","","",null,null],[6,"TaskStateDescriptorHigh","","",null,null],[11,"fmt","","",11,{"inputs":[{"name":"taskstatesegment"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"taskstatesegment"}],"output":{"name":"taskstatesegment"}}],[0,"dtables","x86","Functions and data-structures to load descriptor tables.",null,null],[3,"DescriptorTablePointer","x86::dtables","A struct describing a pointer to a descriptor table (GDT / IDT).\nThis is in a format suitable for giving to 'lgdt' or 'lidt'.",null,null],[12,"limit","","Size of the DT.",12,null],[12,"base","","Pointer to the memory region containing the DT.",12,null],[5,"lgdt","","Load GDT table.",null,{"inputs":[{"name":"descriptortablepointer"}],"output":null}],[5,"lldt","","Load LDT table.",null,{"inputs":[{"name":"descriptortablepointer"}],"output":null}],[5,"lidt","","Load IDT table.",null,{"inputs":[{"name":"descriptortablepointer"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"descriptortablepointer"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"syscall","x86","Invokes an OS system-call handler at privilege level 0.",null,null],[5,"syscall0","x86::syscall","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[5,"syscall1","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"syscall2","","",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"syscall3","","",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"syscall4","","",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"syscall5","","",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"syscall6","","",null,{"inputs":[{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"},{"name":"u64"}],"output":{"name":"u64"}}],[0,"perfcnt","x86","Information about available performance counters.",null,null],[5,"core_counters","x86::perfcnt","Return all core performance counters for the running micro-architecture.",null,{"inputs":[],"output":{"name":"option"}}],[5,"uncore_counters","","Return all uncore performance counters for the running micro-architecture.",null,{"inputs":[],"output":{"name":"option"}}],[0,"intel","","Information about Intel's performance counters.",null,null],[0,"counters","x86::perfcnt::intel","Performance counter for all Intel architectures.",null,null],[7,"COUNTER_MAP","x86::perfcnt::intel::counters","",null,null],[17,"BONNELL_CORE","","",null,null],[17,"BROADWELL_CORE","","",null,null],[17,"WESTMEREEX_CORE","","",null,null],[17,"BROADWELLDE_CORE","","",null,null],[17,"BROADWELL_UNCORE","","",null,null],[17,"JAKETOWN_CORE","","",null,null],[17,"NEHALEMEX_CORE","","",null,null],[17,"WESTMEREEP_SP_CORE","","",null,null],[17,"HASWELL_UNCORE","","",null,null],[17,"WESTMEREEP_DP_CORE","","",null,null],[17,"JAKETOWN_UNCORE","","",null,null],[17,"IVYTOWN_UNCORE","","",null,null],[17,"SANDYBRIDGE_UNCORE","","",null,null],[17,"HASWELLX_CORE","","",null,null],[17,"IVYBRIDGE_CORE","","",null,null],[17,"HASWELLX_UNCORE","","",null,null],[17,"IVYBRIDGE_UNCORE","","",null,null],[17,"IVYTOWN_CORE","","",null,null],[17,"NEHALEMEP_CORE","","",null,null],[17,"SKYLAKE_CORE","","",null,null],[17,"SILVERMONT_CORE","","",null,null],[17,"HASWELL_CORE","","",null,null],[17,"BROADWELLDE_UNCORE","","",null,null],[17,"SANDYBRIDGE_CORE","","",null,null],[0,"description","x86::perfcnt::intel","",null,null],[3,"IntelPerformanceCounterDescription","x86::perfcnt::intel::description","",null,null],[12,"event_code","","This field maps to the Event Select field in the IA32_PERFEVTSELx[7:0]MSRs.",13,null],[12,"umask","","This field maps to the Unit Mask filed in the IA32_PERFEVTSELx[15:8] MSRs.",13,null],[12,"event_name","","It is a string of characters to identify the programming of an event.",13,null],[12,"brief_description","","This field contains a description of what is being counted by a particular event.",13,null],[12,"public_description","","In some cases, this field will contain a more detailed description of what is counted by an event.",13,null],[12,"counter","","This field lists the fixed (PERF_FIXED_CTRX) or programmable (IA32_PMCX)\ncounters that can be used to count the event.",13,null],[12,"counter_ht_off","","This field lists the counters where this event can be sampled\nwhen Intel® Hyper-Threading Technology (Intel® HT Technology) is\ndisabled.",13,null],[12,"pebs_counters","","This field is only relevant to PEBS events.",13,null],[12,"sample_after_value","","Sample After Value (SAV) is the value that can be preloaded\ninto the counter registers to set the point at which they will overflow.",13,null],[12,"msr_index","","Additional MSRs may be required for programming certain events.\nThis field gives the address of such MSRS.",13,null],[12,"msr_value","","When an MSRIndex is used (indicated by the MSRIndex column), this field will\ncontain the value that needs to be loaded into the\nregister whose address is given in MSRIndex column.",13,null],[12,"taken_alone","","This field is set for an event which can only be sampled or counted by itself,\nmeaning that when this event is being collected,\nthe remaining programmable counters are not available to count any other events.",13,null],[12,"counter_mask","","This field maps to the Counter Mask (CMASK) field in IA32_PERFEVTSELx[31:24] MSR.",13,null],[12,"invert","","This field corresponds to the Invert Counter Mask (INV) field in IA32_PERFEVTSELx[23] MSR.",13,null],[12,"any_thread","","This field corresponds to the Any Thread (ANY) bit of IA32_PERFEVTSELx[21] MSR.",13,null],[12,"edge_detect","","This field corresponds to the Edge Detect (E) bit of IA32_PERFEVTSELx[18] MSR.",13,null],[12,"pebs","","A '0' in this field means that the event cannot be programmed as a PEBS event.\nA '1' in this field means that the event is a  precise event and can be programmed\nin one of two ways – as a regular event or as a PEBS event.\nAnd a '2' in this field means that the event can only be programmed as a PEBS event.",13,null],[12,"precise_store","","A '1' in this field means the event uses the Precise Store feature and Bit 3 and\nbit 63 in IA32_PEBS_ENABLE MSR must be set to enable IA32_PMC3 as a PEBS counter\nand enable the precise store facility respectively.",13,null],[12,"data_la","","A '1' in this field means that when the event is configured as a PEBS event,\nthe Data Linear Address facility is supported.",13,null],[12,"l1_hit_indication","","A '1' in this field means that when the event is configured as a PEBS event,\nthe DCU hit field of the PEBS record is set to 1 when the store hits in the\nL1 cache and 0 when it misses.",13,null],[12,"errata","","This field lists the known bugs that apply to the events.",13,null],[12,"offcore","","There is only 1 file for core and offcore events in this format.\nThis field is set to 1 for offcore events and 0 for core events.",13,null],[12,"unit","","",13,null],[12,"filter","","",13,null],[12,"extsel","","",13,null],[4,"PebsType","","",null,null],[13,"Regular","","",14,null],[13,"PebsOrRegular","","",14,null],[13,"PebsOnly","","",14,null],[4,"Tuple","","",null,null],[13,"One","","",15,null],[13,"Two","","",15,null],[4,"MSRIndex","","",null,null],[13,"None","","",16,null],[13,"One","","",16,null],[13,"Two","","",16,null],[4,"Counter","","",null,null],[13,"Fixed","","Bit-mask containing the fixed counters\nusable with the corresponding performance event.",17,null],[13,"Programmable","","Bit-mask containing the programmable counters\nusable with the corresponding performance event.",17,null],[11,"fmt","","",14,{"inputs":[{"name":"pebstype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"tuple"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"msrindex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"counter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"intelperformancecounterdescription"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"cpuid","x86","",null,null],[0,"tlb","","Functions to flush the translation lookaside buffer (TLB).",null,null],[5,"flush","x86::tlb","Invalidate the given address in the TLB using the `invlpg` instruction.",null,{"inputs":[{"name":"usize"}],"output":null}],[5,"flush_all","","Invalidate the TLB completely by reloading the CR3 register.",null,{"inputs":[],"output":null}],[14,"int!","x86","Generate a software interrupt.\nThis is a macro argument needs to be an immediate.",null,null],[14,"syscall!","","",null,null]],"paths":[[8,"Write"],[3,"InterruptDescription"],[3,"IdtEntry"],[3,"PageFaultError"],[3,"RFlags"],[3,"PML4Entry"],[3,"PDPTEntry"],[3,"PDEntry"],[3,"PTEntry"],[3,"SegmentSelector"],[3,"SegmentDescriptor"],[3,"TaskStateSegment"],[3,"DescriptorTablePointer"],[3,"IntelPerformanceCounterDescription"],[4,"PebsType"],[4,"Tuple"],[4,"MSRIndex"],[4,"Counter"]]};
searchIndex['raw_cpuid'] = {"items":[[3,"CpuId","raw_cpuid","Main type used to query for information about the CPU we're running on.",null,null],[3,"CpuIdResult","","Low-level data-structure to store result of cpuid instruction.",null,null],[12,"eax","","Return value EAX register",0,null],[12,"ebx","","Return value EBX register",0,null],[12,"ecx","","Return value ECX register",0,null],[12,"edx","","Return value EDX register",0,null],[3,"VendorInfo","","",null,null],[3,"CacheInfoIter","","Used to iterate over cache information contained in cpuid instruction.",null,null],[3,"CacheInfo","","Describes any kind of cache (TLB, Data and Instruction caches plus prefetchers).",null,null],[12,"num","","Number as retrieved from cpuid",1,null],[12,"typ","","Cache type",1,null],[12,"desc","","Description of the cache (from Intel Manual)",1,null],[3,"ProcessorSerial","","",null,null],[3,"FeatureInfo","","",null,null],[3,"CacheParametersIter","","",null,null],[3,"CacheParameter","","",null,null],[3,"MonitorMwaitInfo","","",null,null],[3,"ThermalPowerInfo","","",null,null],[3,"ExtendedFeatures","","",null,null],[3,"DirectCacheAccessInfo","","",null,null],[3,"PerformanceMonitoringInfo","","",null,null],[3,"ExtendedTopologyIter","","",null,null],[3,"ExtendedTopologyLevel","","",null,null],[3,"ExtendedStateInfo","","",null,null],[3,"ExtendedStateIter","","",null,null],[3,"ExtendedState","","",null,null],[12,"subleaf","","",2,null],[3,"QoSInfo","","",null,null],[3,"QoSEnforcementInfo","","",null,null],[3,"QoSEnforcementIter","","Iterator over the QoSEnforcement sub-leafs.",null,null],[3,"QoSEnforcement","","",null,null],[3,"ProcessorTraceInfo","","",null,null],[3,"ProcessorTraceIter","","Iterator over the Processor Trace sub-leafs.",null,null],[3,"ProcessorTrace","","Processor Trace information sub-leaf.",null,null],[3,"TscInfo","","Contains time stamp counter information.",null,null],[3,"ProcessorFrequencyInfo","","Processor Frequency Information",null,null],[3,"ExtendedFunctionInfo","","",null,null],[4,"CacheInfoType","","",null,null],[13,"GENERAL","","",3,null],[13,"CACHE","","",3,null],[13,"TLB","","",3,null],[13,"STLB","","",3,null],[13,"DTLB","","",3,null],[13,"PREFETCH","","",3,null],[4,"CacheType","","",null,null],[13,"NULL","","Null - No more caches",4,null],[13,"DATA","","",4,null],[13,"INSTRUCTION","","",4,null],[13,"UNIFIED","","",4,null],[13,"RESERVED","","4-31 = Reserved",4,null],[4,"TopologyType","","",null,null],[13,"INVALID","","",5,null],[13,"SMT","","Hyper-thread (Simultaneous multithreading)",5,null],[13,"CORE","","",5,null],[4,"L2Associativity","","",null,null],[13,"Disabled","","",6,null],[13,"DirectMapped","","",6,null],[13,"TwoWay","","",6,null],[13,"FourWay","","",6,null],[13,"EightWay","","",6,null],[13,"SixteenWay","","",6,null],[13,"FullyAssiciative","","",6,null],[13,"Unknown","","",6,null],[5,"cpuid2","","Execute CPUID instruction with eax and ecx register set.\nNote: This is a low-level function to query cpuid directly.\nIf in doubt use `CpuId` instead.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"cpuidresult"}}],[5,"cpuid1","","Execute CPUID instruction with eax register set.\nNote: This is a low-level function to query cpuid directly.\nIf in doubt use `CpuId` instead.",null,{"inputs":[{"name":"u32"}],"output":{"name":"cpuidresult"}}],[11,"default","core::num","",7,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",7,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",7,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",7,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",7,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",7,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",7,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",7,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",7,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",7,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",7,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",7,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",7,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",7,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::flt2dec::decoder","",8,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",9,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",10,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",10,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",10,null],[11,"clone","","",11,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",11,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",11,null],[11,"fmt","","",12,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",13,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",13,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",14,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",15,null],[11,"eq","","",16,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",17,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",17,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",18,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",19,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",19,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",19,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",19,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",19,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",19,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",19,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",19,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",19,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",19,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",19,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",19,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",19,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",19,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",19,null],[11,"eq","","",19,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",19,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",19,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",19,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",20,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",20,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",20,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",20,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",20,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",20,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",20,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",20,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",20,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",20,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",20,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",20,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",20,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",20,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",20,null],[11,"eq","","",20,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",20,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",20,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",20,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",21,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",21,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",21,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",21,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",22,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",23,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",23,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",24,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",25,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",25,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",25,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",25,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",26,null],[11,"get","","Dereferences the content.",26,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",26,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",27,null],[11,"clone","","",27,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",28,null],[11,"eq","","",28,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",28,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",28,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",28,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",29,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",29,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",30,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",31,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",32,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",33,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",33,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",33,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","raw_cpuid::std","",34,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",34,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",34,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",34,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",34,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",34,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",34,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",35,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",36,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",37,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",38,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",39,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",40,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",36,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",36,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",36,null],[11,"swap","","Stores a value into the bool, returning the old value.",36,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",36,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",36,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",36,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",36,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",36,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",37,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",37,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",37,null],[11,"swap","","Stores a value into the isize, returning the old value.",37,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",37,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",37,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",37,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",37,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",37,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",37,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",38,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",38,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",38,null],[11,"swap","","Stores a value into the usize, returning the old value.",38,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",38,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",38,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",38,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",38,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",38,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",38,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",39,null],[11,"load","","Loads a value from the pointer.",39,null],[11,"store","","Stores a value into the pointer.",39,null],[11,"swap","","Stores a value into the pointer, returning the old value.",39,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",39,null],[11,"fmt","","",38,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",41,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",41,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",41,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",41,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",41,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",41,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",41,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",42,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",43,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",43,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",43,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",43,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",43,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",43,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",43,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",43,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",43,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",44,null],[11,"clone","","",44,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",45,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",45,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",45,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",45,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",46,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",46,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",47,null],[11,"deref","","",46,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",46,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",48,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",48,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",48,null],[11,"clone","core::char","",49,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",50,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",49,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"clone","","",51,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",52,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",51,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"clone","core::iter","",53,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",53,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",54,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",55,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"clone","","",56,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",57,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",56,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",56,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",56,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",56,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",58,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",58,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",59,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",59,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next_back","","",59,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",60,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",60,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"next_back","","",60,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",61,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",61,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",62,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",62,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"nth","","",62,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",62,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",62,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",63,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",63,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",63,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",63,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",63,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",63,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",63,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",64,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"clone","","",65,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",65,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"clone","","",66,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",66,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",66,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",66,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",66,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"clone","","",67,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",67,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",67,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"clone","","",68,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",68,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"clone","","",69,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",69,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",70,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",70,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",70,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",70,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",70,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",71,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",71,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",72,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",31,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",30,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",72,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"clone","","",73,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",73,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",72,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next","core::ops","",30,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next_back","","",30,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",74,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",74,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",75,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",75,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",75,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",76,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",76,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",76,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",77,null],[11,"fmt","","",77,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",77,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",77,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",77,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",77,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",77,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",77,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",77,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",77,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",77,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",77,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",77,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",77,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",77,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",77,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",77,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",77,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",77,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",77,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",77,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",77,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",77,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",77,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",77,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",77,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",77,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",77,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",77,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",77,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",77,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",77,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",77,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",78,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",78,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",79,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",79,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",80,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",81,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",81,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"next_back","","",81,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",77,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",82,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",83,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",84,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",84,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",84,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",84,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",84,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",84,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",84,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",84,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",84,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",84,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",84,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",84,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",84,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",84,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",84,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",84,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",84,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",84,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",84,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",84,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",84,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",84,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",84,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",84,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",84,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",85,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",85,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",86,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next_back","","",86,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",87,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next_back","","",87,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",84,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",88,null],[11,"next","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"count","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",88,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",89,null],[11,"next","","",89,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"count","","",89,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",89,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",89,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",89,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",90,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",90,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"next_back","","",90,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",90,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",91,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",91,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"next_back","","",91,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",92,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next","","",93,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next","","",94,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next","","",95,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next","","",96,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"clone","","",97,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",97,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"count","","",97,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",97,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",97,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",97,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",98,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"count","","",98,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",98,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",98,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",98,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",99,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"count","","",99,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",99,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",99,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",99,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",100,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",100,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",101,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",102,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",101,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",101,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",101,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",103,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",104,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",105,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",106,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",107,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",108,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",106,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",106,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",106,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",106,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",106,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",109,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",110,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",110,null],[11,"matching","","",110,null],[11,"use_early_reject","","",111,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",111,null],[11,"matching","","",111,null],[11,"eq","core::str","",112,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",112,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",113,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",113,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",113,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",114,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",114,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",115,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",115,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",115,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",116,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",116,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"count","","",116,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",116,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",116,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",116,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",116,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",117,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",118,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",118,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",119,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",119,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",118,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",119,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",120,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",121,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",121,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",120,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",121,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",122,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",123,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",123,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",124,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",124,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",125,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",126,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",126,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",127,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",126,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",127,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",128,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",129,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",129,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",130,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",129,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",130,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",131,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",131,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"next_back","","",131,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",132,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",133,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",133,null],[11,"call_mut","","",133,null],[11,"call_once","","",133,null],[11,"next","","",132,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",132,null],[11,"next_back","","",132,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",134,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",135,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",135,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",135,null],[11,"finish","","",135,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",135,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",135,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",136,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",136,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",137,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",138,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",138,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",138,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",139,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",139,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",140,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",141,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",142,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",143,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",144,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",144,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",145,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",145,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",145,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",146,null],[11,"entry","","Adds a new entry to the set output.",147,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",147,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",147,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",148,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",148,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",148,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",149,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",149,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",149,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",150,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",151,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",152,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",153,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",154,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",155,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",156,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",157,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",158,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",158,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",159,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",159,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",159,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",159,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",159,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",159,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",159,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",159,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",159,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",159,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",159,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",159,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",159,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",159,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",159,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",159,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",159,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",159,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",159,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",159,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",159,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",28,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",41,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[17,"CACHE_INFO_TABLE","raw_cpuid","This table is taken from Intel manual (Section CPUID instruction).",null,null],[11,"fmt","","",160,{"inputs":[{"name":"cpuid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[{"name":"cpuidresult"}],"output":{"name":"cpuidresult"}}],[11,"clone","","",0,{"inputs":[{"name":"cpuidresult"}],"output":{"name":"cpuidresult"}}],[11,"fmt","","",0,{"inputs":[{"name":"cpuidresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Return new CPUID struct.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"cpuid"}}],[11,"get_vendor_info","","Return information about vendor.\nThis is typically a ASCII readable string such as\nGenuineIntel for Intel CPUs or AuthenticAMD for AMD CPUs.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_feature_info","","Query a set of features that are available on this CPU.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_cache_info","","Query basic information about caches. This will just return an index\ninto a static table of cache descriptions (see `CACHE_INFO_TABLE`).",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_processor_serial","","Retrieve serial number of processor.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_cache_parameters","","Retrieve more elaborate information about caches (as opposed\nto `get_cache_info`). This will tell us about associativity,\nset size, line size etc. for each level of the cache hierarchy.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_monitor_mwait_info","","Information about how monitor/mwait works on this CPU.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_thermal_power_info","","Query information about thermal and power management features of the CPU.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_extended_feature_info","","Find out about more features supported by this CPU.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_direct_cache_access_info","","Direct cache access info.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_performance_monitoring_info","","Info about performance monitoring (how many counters etc.).",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_extended_topology_info","","Information about topology (how many cores and what kind of cores).",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_extended_state_info","","Information for saving/restoring extended register state.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_qos_info","","Quality of service informations.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_qos_enforcement_info","","Quality of service enforcement information.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_processor_trace_info","","Intel Processor Trace Enumeration Information.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_tsc_info","","Time Stamp Counter/Core Crystal Clock Information.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_processor_frequency_info","","Processor Frequency Information.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"get_extended_function_info","","Extended functionality of CPU described here (including more supported features).\nThis also contains a more detailed CPU model identifier.",160,{"inputs":[{"name":"cpuid"}],"output":{"name":"option"}}],[11,"fmt","","",161,{"inputs":[{"name":"vendorinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_string","","Return vendor identification as human readable string.",161,{"inputs":[{"name":"vendorinfo"}],"output":{"name":"str"}}],[11,"fmt","","",162,{"inputs":[{"name":"cacheinfoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","Iterate over all cache information.",162,{"inputs":[{"name":"cacheinfoiter"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"cacheinfotype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"cacheinfotype"}],"output":{"name":"cacheinfotype"}}],[11,"fmt","","",1,{"inputs":[{"name":"cacheinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"cacheinfo"}],"output":{"name":"cacheinfo"}}],[11,"fmt","","",1,{"inputs":[{"name":"cacheinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"vendorinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serial_lower","","Bits 00-31 of 96 bit processor serial number.\n(Available in Pentium III processor only; otherwise, the value in this register is reserved.)",163,{"inputs":[{"name":"processorserial"}],"output":{"name":"u32"}}],[11,"serial_middle","","Bits 32-63 of 96 bit processor serial number.\n(Available in Pentium III processor only; otherwise, the value in this register is reserved.)",163,{"inputs":[{"name":"processorserial"}],"output":{"name":"u32"}}],[11,"fmt","","",164,{"inputs":[{"name":"featureinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extended_family_id","","Version Information: Extended Family",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"extended_model_id","","Version Information: Extended Model",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"family_id","","Version Information: Family",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"model_id","","Version Information: Model",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"stepping_id","","Version Information: Stepping ID",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"brand_index","","Brand Index",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"cflush_cache_line_size","","CLFLUSH line size (Value ∗ 8 = cache line size in bytes)",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"initial_local_apic_id","","Initial APIC ID",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"max_logical_processor_ids","","Maximum number of addressable IDs for logical processors in this physical package.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"u8"}}],[11,"has_sse3","","Streaming SIMD Extensions 3 (SSE3). A value of 1 indicates the processor supports this technology.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pclmulqdq","","PCLMULQDQ. A value of 1 indicates the processor supports the PCLMULQDQ instruction",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_ds_area","","64-bit DS Area. A value of 1 indicates the processor supports DS area using 64-bit layout",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_monitor_mwait","","MONITOR/MWAIT. A value of 1 indicates the processor supports this feature.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_cpl","","CPL Qualified Debug Store. A value of 1 indicates the processor supports the extensions to the  Debug Store feature to allow for branch message storage qualified by CPL.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_vmx","","Virtual Machine Extensions. A value of 1 indicates that the processor supports this technology.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_smx","","Safer Mode Extensions. A value of 1 indicates that the processor supports this technology. See Chapter 5, Safer Mode Extensions Reference.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_eist","","Enhanced Intel SpeedStep® technology. A value of 1 indicates that the processor supports this technology.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_tm2","","Thermal Monitor 2. A value of 1 indicates whether the processor supports this technology.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_ssse3","","A value of 1 indicates the presence of the Supplemental Streaming SIMD Extensions 3 (SSSE3). A value of 0 indicates the instruction extensions are not present in the processor",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_cnxtid","","L1 Context ID. A value of 1 indicates the L1 data cache mode can be set to either adaptive mode or shared mode. A value of 0 indicates this feature is not supported. See definition of the IA32_MISC_ENABLE MSR Bit 24 (L1 Data Cache Context Mode) for details.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_fma","","A value of 1 indicates the processor supports FMA extensions using YMM state.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_cmpxchg16b","","CMPXCHG16B Available. A value of 1 indicates that the feature is available. See the CMPXCHG8B/CMPXCHG16B Compare and Exchange Bytes section. 14",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pdcm","","Perfmon and Debug Capability: A value of 1 indicates the processor supports the performance   and debug feature indication MSR IA32_PERF_CAPABILITIES.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pcid","","Process-context identifiers. A value of 1 indicates that the processor supports PCIDs and the software may set CR4.PCIDE to 1.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_dca","","A value of 1 indicates the processor supports the ability to prefetch data from a memory mapped device.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_sse41","","A value of 1 indicates that the processor supports SSE4.1.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_sse42","","A value of 1 indicates that the processor supports SSE4.2.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_x2apic","","A value of 1 indicates that the processor supports x2APIC feature.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_movbe","","A value of 1 indicates that the processor supports MOVBE instruction.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_popcnt","","A value of 1 indicates that the processor supports the POPCNT instruction.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_tsc_deadline","","A value of 1 indicates that the processors local APIC timer supports one-shot operation using a TSC deadline value.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_aesni","","A value of 1 indicates that the processor supports the AESNI instruction extensions.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_xsave","","A value of 1 indicates that the processor supports the XSAVE/XRSTOR processor extended states feature, the XSETBV/XGETBV instructions, and XCR0.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_oxsave","","A value of 1 indicates that the OS has enabled XSETBV/XGETBV instructions to access XCR0, and support for processor extended state management using XSAVE/XRSTOR.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_avx","","A value of 1 indicates the processor supports the AVX instruction extensions.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_f16c","","A value of 1 indicates that processor supports 16-bit floating-point conversion instructions.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_rdrand","","A value of 1 indicates that processor supports RDRAND instruction.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_fpu","","Floating Point Unit On-Chip. The processor contains an x87 FPU.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_vme","","Virtual 8086 Mode Enhancements. Virtual 8086 mode enhancements, including CR4.VME for controlling the feature, CR4.PVI for protected mode virtual interrupts, software interrupt indirection, expansion of the TSS with the software indirection bitmap, and EFLAGS.VIF and EFLAGS.VIP flags.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_de","","Debugging Extensions. Support for I/O breakpoints, including CR4.DE for controlling the feature, and optional trapping of accesses to DR4 and DR5.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pse","","Page Size Extension. Large pages of size 4 MByte are supported, including CR4.PSE for controlling the feature, the defined dirty bit in PDE (Page Directory Entries), optional reserved bit trapping in CR3, PDEs, and PTEs.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_tsc","","Time Stamp Counter. The RDTSC instruction is supported, including CR4.TSD for controlling privilege.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_msr","","Model Specific Registers RDMSR and WRMSR Instructions. The RDMSR and WRMSR instructions are supported. Some of the MSRs are implementation dependent.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pae","","Physical Address Extension. Physical addresses greater than 32 bits are supported: extended page table entry formats, an extra level in the page translation tables is defined, 2-MByte pages are supported instead of 4 Mbyte pages if PAE bit is 1.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_mce","","Machine Check Exception. Exception 18 is defined for Machine Checks, including CR4.MCE for controlling the feature. This feature does not define the model-specific implementations of machine-check error logging, reporting, and processor shutdowns. Machine Check exception handlers may have to depend on processor version to do model specific processing of the exception, or test for the presence of the Machine Check feature.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_cmpxchg8b","","CMPXCHG8B Instruction. The compare-and-exchange 8 bytes (64 bits) instruction is supported (implicitly locked and atomic).",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_apic","","APIC On-Chip. The processor contains an Advanced Programmable Interrupt Controller (APIC), responding to memory mapped commands in the physical address range FFFE0000H to FFFE0FFFH (by default - some processors permit the APIC to be relocated).",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_sysenter_sysexit","","SYSENTER and SYSEXIT Instructions. The SYSENTER and SYSEXIT and associated MSRs are supported.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_mtrr","","Memory Type Range Registers. MTRRs are supported. The MTRRcap MSR contains feature bits that describe what memory types are supported, how many variable MTRRs are supported, and whether fixed MTRRs are supported.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pge","","Page Global Bit. The global bit is supported in paging-structure entries that map a page, indicating TLB entries that are common to different processes and need not be flushed. The CR4.PGE bit controls this feature.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_mca","","Machine Check Architecture. The Machine Check Architecture, which provides a compatible mechanism for error reporting in P6 family, Pentium 4, Intel Xeon processors, and future processors, is supported. The MCG_CAP MSR contains feature bits describing how many banks of error reporting MSRs are supported.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_cmov","","Conditional Move Instructions. The conditional move instruction CMOV is supported. In addition, if x87 FPU is present as indicated by the CPUID.FPU feature bit, then the FCOMI and FCMOV instructions are supported",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pat","","Page Attribute Table. Page Attribute Table is supported. This feature augments the Memory Type Range Registers (MTRRs), allowing an operating system to specify attributes of memory accessed through a linear address on a 4KB granularity.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pse36","","36-Bit Page Size Extension. 4-MByte pages addressing physical memory beyond 4 GBytes are supported with 32-bit paging. This feature indicates that upper bits of the physical address of a 4-MByte page are encoded in bits 20:13 of the page-directory entry. Such physical addresses are limited by MAXPHYADDR and may be up to 40 bits in size.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_psn","","Processor Serial Number. The processor supports the 96-bit processor identification number feature and the feature is enabled.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_clflush","","CLFLUSH Instruction. CLFLUSH Instruction is supported.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_ds","","Debug Store. The processor supports the ability to write debug information into a memory resident buffer. This feature is used by the branch trace store (BTS) and precise event-based sampling (PEBS) facilities (see Chapter 23, Introduction to Virtual-Machine Extensions, in the Intel® 64 and IA-32 Architectures Software Developers Manual, Volume 3C).",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_acpi","","Thermal Monitor and Software Controlled Clock Facilities. The processor implements internal MSRs that allow processor temperature to be monitored and processor performance to be modulated in predefined duty cycles under software control.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_mmx","","Intel MMX Technology. The processor supports the Intel MMX technology.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_fxsave_fxstor","","FXSAVE and FXRSTOR Instructions. The FXSAVE and FXRSTOR instructions are supported for fast save and restore of the floating point context. Presence of this bit also indicates that CR4.OSFXSR is available for an operating system to indicate that it supports the FXSAVE and FXRSTOR instructions.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_sse","","SSE. The processor supports the SSE extensions.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_sse2","","SSE2. The processor supports the SSE2 extensions.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_ss","","Self Snoop. The processor supports the management of conflicting memory types by performing a snoop of its own cache structure for transactions issued to the bus.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_htt","","Max APIC IDs reserved field is Valid. A value of 0 for HTT indicates there is only a single logical processor in the package and software should assume only a single APIC ID is reserved.  A value of 1 for HTT indicates the value in CPUID.1.EBX[23:16] (the Maximum number of addressable IDs for logical processors in this package) is valid for the package.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_tm","","Thermal Monitor. The processor implements the thermal monitor automatic thermal control circuitry (TCC).",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"has_pbe","","Pending Break Enable. The processor supports the use of the FERR#/PBE# pin when the processor is in the stop-clock state (STPCLK# is asserted) to signal the processor that an interrupt is pending and that the processor should return to normal operation to handle the interrupt. Bit 10 (PBE enable) in the IA32_MISC_ENABLE MSR enables this capability.",164,{"inputs":[{"name":"featureinfo"}],"output":{"name":"bool"}}],[11,"next","","Iterate over all caches for this CPU.\nNote: cpuid is called every-time we this function to get information\nabout next cache.",165,{"inputs":[{"name":"cacheparametersiter"}],"output":{"name":"option"}}],[11,"fmt","","",166,{"inputs":[{"name":"cacheparameter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",166,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"cacheparameter"}}],[11,"eq","","",4,{"inputs":[{"name":"cachetype"},{"name":"cachetype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"cachetype"},{"name":"cachetype"}],"output":{"name":"bool"}}],[11,"cache_type","","Cache Type",166,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"cachetype"}}],[11,"level","","Cache Level (starts at 1)",166,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"u8"}}],[11,"is_self_initializing","","Self Initializing cache level (does not need SW initialization).",166,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"bool"}}],[11,"is_fully_associative","","Fully Associative cache",166,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"bool"}}],[11,"max_cores_for_cache","","Maximum number of addressable IDs for logical processors sharing this cache",166,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"usize"}}],[11,"max_cores_for_package","","Maximum number of addressable IDs for processor cores in the physical package",166,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"usize"}}],[11,"coherency_line_size","","System Coherency Line Size (Bits 11-00)",166,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"usize"}}],[11,"physical_line_partitions","","Physical Line partitions (Bits 21-12)",166,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"usize"}}],[11,"associativity","","Ways of associativity (Bits 31-22)",166,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"usize"}}],[11,"sets","","Number of Sets (Bits 31-00)",166,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"usize"}}],[11,"is_write_back_invalidate","","Write-Back Invalidate/Invalidate (Bit 0)\nFalse: WBINVD/INVD from threads sharing this cache acts upon lower level caches for threads sharing this cache.\nTrue: WBINVD/INVD is not guaranteed to act upon lower level caches of non-originating threads sharing this cache.",166,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"bool"}}],[11,"is_inclusive","","Cache Inclusiveness (Bit 1)\nFalse: Cache is not inclusive of lower cache levels.\nTrue: Cache is inclusive of lower cache levels.",166,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"bool"}}],[11,"has_complex_indexing","","Complex Cache Indexing (Bit 2)\nFalse: Direct mapped cache.\nTrue: A complex function is used to index the cache, potentially using all address bits.",166,{"inputs":[{"name":"cacheparameter"}],"output":{"name":"bool"}}],[11,"fmt","","",167,{"inputs":[{"name":"monitormwaitinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"smallest_monitor_line","","Smallest monitor-line size in bytes (default is processor's monitor granularity)",167,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"largest_monitor_line","","Largest monitor-line size in bytes (default is processor's monitor granularity",167,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"extensions_supported","","Enumeration of Monitor-Mwait extensions (beyond EAX and EBX registers) supported",167,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"bool"}}],[11,"interrupts_as_break_event","","Supports treating interrupts as break-event for MWAIT, even when interrupts disabled",167,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"bool"}}],[11,"supported_c0_states","","Number of C0 sub C-states supported using MWAIT (Bits 03 - 00)",167,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"supported_c1_states","","Number of C1 sub C-states supported using MWAIT (Bits 07 - 04)",167,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"supported_c2_states","","Number of C2 sub C-states supported using MWAIT (Bits 11 - 08)",167,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"supported_c3_states","","Number of C3 sub C-states supported using MWAIT (Bits 15 - 12)",167,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"supported_c4_states","","Number of C4 sub C-states supported using MWAIT (Bits 19 - 16)",167,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"supported_c5_states","","Number of C5 sub C-states supported using MWAIT (Bits 23 - 20)",167,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"supported_c6_states","","Number of C6 sub C-states supported using MWAIT (Bits 27 - 24)",167,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"supported_c7_states","","Number of C7 sub C-states supported using MWAIT (Bits 31 - 28)",167,{"inputs":[{"name":"monitormwaitinfo"}],"output":{"name":"u16"}}],[11,"fmt","","",168,{"inputs":[{"name":"thermalpowerinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"has_dts","","Digital temperature sensor is supported if set.",168,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"has_turbo_boost","","Intel Turbo Boost Technology Available (see description of IA32_MISC_ENABLE[38]).",168,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"has_arat","","ARAT. APIC-Timer-always-running feature is supported if set.",168,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"has_pln","","PLN. Power limit notification controls are supported if set.",168,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"has_ecmd","","ECMD. Clock modulation duty cycle extension is supported if set.",168,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"has_ptm","","PTM. Package thermal management is supported if set.",168,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"has_hw_coord_feedback","","Hardware Coordination Feedback Capability (Presence of IA32_MPERF and IA32_APERF). The capability to provide a measure of delivered processor performance (since last reset of the counters), as a percentage of expected processor performance at frequency specified in CPUID Brand String Bits 02 - 01",168,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"has_energy_bias_pref","","The processor supports performance-energy bias preference if CPUID.06H:ECX.SETBH[bit 3] is set and it also implies the presence of a new architectural MSR called IA32_ENERGY_PERF_BIAS (1B0H)",168,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"bool"}}],[11,"dts_irq_threshold","","Number of Interrupt Thresholds in Digital Thermal Sensor",168,{"inputs":[{"name":"thermalpowerinfo"}],"output":{"name":"u8"}}],[11,"fmt","","",169,{"inputs":[{"name":"extendedfeatures"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"has_fsgsbase","","FSGSBASE. Supports RDFSBASE/RDGSBASE/WRFSBASE/WRGSBASE if 1.",169,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_tsc_adjust_msr","","IA32_TSC_ADJUST MSR is supported if 1.",169,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_bmi1","","BMI1",169,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_hle","","HLE",169,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_avx2","","AVX2",169,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_smep","","SMEP. Supports Supervisor-Mode Execution Prevention if 1.",169,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_bmi2","","BMI2",169,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_rep_movsb_stosb","","Supports Enhanced REP MOVSB/STOSB if 1.",169,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_invpcid","","INVPCID. If 1, supports INVPCID instruction for system software that manages process-context identifiers.",169,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_rtm","","RTM",169,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_qm","","Supports Quality of Service Monitoring (QM) capability if 1.",169,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_fpu_cs_ds_deprecated","","Deprecates FPU CS and FPU DS values if 1.",169,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"has_mpx","","MPX. Supports Intel Memory Protection Extensions if 1.",169,{"inputs":[{"name":"extendedfeatures"}],"output":{"name":"bool"}}],[11,"fmt","","",170,{"inputs":[{"name":"directcacheaccessinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_dca_cap_value","","Value of bits [31:0] of IA32_PLATFORM_DCA_CAP MSR (address 1F8H)",170,{"inputs":[{"name":"directcacheaccessinfo"}],"output":{"name":"u32"}}],[11,"fmt","","",171,{"inputs":[{"name":"performancemonitoringinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"version_id","","Version ID of architectural performance monitoring. (Bits 07 - 00)",171,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"u8"}}],[11,"number_of_counters","","Number of general-purpose performance monitoring counter per logical processor. (Bits 15- 08)",171,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"u8"}}],[11,"counter_bit_width","","Bit width of general-purpose, performance monitoring counter. (Bits 23 - 16)",171,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"u8"}}],[11,"ebx_length","","Length of EBX bit vector to enumerate architectural performance monitoring events. (Bits 31 - 24)",171,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"u8"}}],[11,"fixed_function_counters","","Number of fixed-function performance counters (if Version ID > 1). (Bits 04 - 00)",171,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"u8"}}],[11,"fixed_function_counters_bit_width","","Bit width of fixed-function performance counters (if Version ID > 1). (Bits 12- 05)",171,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"u8"}}],[11,"is_core_cyc_ev_unavailable","","Core cycle event not available if 1.",171,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"bool"}}],[11,"is_inst_ret_ev_unavailable","","Instruction retired event not available if 1.",171,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"bool"}}],[11,"is_ref_cycle_ev_unavailable","","Reference cycles event not available if 1.",171,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"bool"}}],[11,"is_cache_ref_ev_unavailable","","Last-level cache reference event not available if 1.",171,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"bool"}}],[11,"is_ll_cache_miss_ev_unavailable","","Last-level cache misses event not available if 1.",171,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"bool"}}],[11,"is_branch_inst_ret_ev_unavailable","","Branch instruction retired event not available if 1.",171,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"bool"}}],[11,"is_branch_midpred_ev_unavailable","","Branch mispredict retired event not available if 1.",171,{"inputs":[{"name":"performancemonitoringinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",172,{"inputs":[{"name":"extendedtopologyiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"extendedtopologylevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"processors","","Number of logical processors at this level type.\nThe number reflects configuration as shipped.",173,{"inputs":[{"name":"extendedtopologylevel"}],"output":{"name":"u16"}}],[11,"level_number","","Level number.",173,{"inputs":[{"name":"extendedtopologylevel"}],"output":{"name":"u8"}}],[11,"level_type","","",173,{"inputs":[{"name":"extendedtopologylevel"}],"output":{"name":"topologytype"}}],[11,"x2apic_id","","x2APIC ID the current logical processor. (Bits 31-00)",173,{"inputs":[{"name":"extendedtopologylevel"}],"output":{"name":"u32"}}],[11,"shift_right_for_next_apic_id","","Number of bits to shift right on x2APIC ID to get a unique topology ID of the next level type. (Bits 04-00)\nAll logical processors with the same next level ID share current level.",173,{"inputs":[{"name":"extendedtopologylevel"}],"output":{"name":"u32"}}],[11,"fmt","","",5,{"inputs":[{"name":"topologytype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"topologytype"},{"name":"topologytype"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"topologytype"},{"name":"topologytype"}],"output":{"name":"bool"}}],[11,"next","","",172,{"inputs":[{"name":"extendedtopologyiter"}],"output":{"name":"option"}}],[11,"fmt","","",174,{"inputs":[{"name":"extendedstateinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"xcr0_supported","","Reports the valid bit fields of XCR0. If a bit is 0,\nthe corresponding bit field in XCR0 is reserved.",174,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"u64"}}],[11,"has_legacy_x87","","Legacy x87.",174,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"bool"}}],[11,"has_sse_128","","SSE 128-bit.",174,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"bool"}}],[11,"has_avx_256","","AVX 256-bit.",174,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"bool"}}],[11,"has_mpx","","MPX.",174,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"bool"}}],[11,"has_avx_512","","AVX 512-bit.",174,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"bool"}}],[11,"has_ia32_xss","","IA32_XSS.",174,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"bool"}}],[11,"has_pkru","","PKRU.",174,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"bool"}}],[11,"maximum_size_enabled_features","","Maximum size (bytes, from the beginning of the XSAVE/XRSTOR save area) required by\nenabled features in XCR0. May be different than ECX if some features at the end of the XSAVE save area\nare not enabled.",174,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"u32"}}],[11,"maximum_size_supported_features","","Maximum size (bytes, from the beginning of the XSAVE/XRSTOR save area) of the\nXSAVE/XRSTOR save area required by all supported features in the processor,\ni.e all the valid bit fields in XCR0.",174,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"u32"}}],[11,"has_xsaveopt","","CPU has xsaveopt feature.",174,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"bool"}}],[11,"has_xsavec","","Supports XSAVEC and the compacted form of XRSTOR if set.",174,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"bool"}}],[11,"has_xgetbv","","Supports XGETBV with ECX = 1 if set.",174,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"bool"}}],[11,"has_xsaves_xrstors","","Supports XSAVES/XRSTORS and IA32_XSS if set.",174,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"bool"}}],[11,"iter","","Iterator over extended state enumeration levels >= 2.",174,{"inputs":[{"name":"extendedstateinfo"}],"output":{"name":"extendedstateiter"}}],[11,"next","","",175,{"inputs":[{"name":"extendedstateiter"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"extendedstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"size","","The size in bytes (from the offset specified in EBX) of the save area\nfor an extended state feature associated with a valid sub-leaf index, n.\nThis field reports 0 if the sub-leaf index, n, is invalid.",2,{"inputs":[{"name":"extendedstate"}],"output":{"name":"u32"}}],[11,"offset","","The offset in bytes of this extended state components save area\nfrom the beginning of the XSAVE/XRSTOR area.",2,{"inputs":[{"name":"extendedstate"}],"output":{"name":"u32"}}],[11,"is_in_ia32_xss","","True if the bit n (corresponding to the sub-leaf index)\nis supported in the IA32_XSS MSR;",2,{"inputs":[{"name":"extendedstate"}],"output":{"name":"bool"}}],[11,"is_in_xcr0","","True if bit n is supported in XCR0.",2,{"inputs":[{"name":"extendedstate"}],"output":{"name":"bool"}}],[11,"is_compacted_format","","Returns true when the compacted format of an XSAVE area is used,\nthis extended state component located on the next 64-byte\nboundary following the preceding state component\n(otherwise, it is located immediately following the preceding state component).",2,{"inputs":[{"name":"extendedstate"}],"output":{"name":"bool"}}],[11,"fmt","","",176,{"inputs":[{"name":"qosinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"maximum_rmid_range","","Maximum range (zero-based) of RMID within this physical processor of all types.",176,{"inputs":[{"name":"qosinfo"}],"output":{"name":"u32"}}],[11,"has_l3_qos","","Supports L3 Cache QoS if true.",176,{"inputs":[{"name":"qosinfo"}],"output":{"name":"bool"}}],[11,"conversion_factor","","Conversion factor from reported IA32_QM_CTR value to occupancy metric (bytes).",176,{"inputs":[{"name":"qosinfo"}],"output":{"name":"u32"}}],[11,"maximum_range_l3_rmid","","Maximum range (zero-based) of RMID of L3.",176,{"inputs":[{"name":"qosinfo"}],"output":{"name":"u32"}}],[11,"has_l3_occupancy_monitoring","","Supports L3 occupancy monitoring if true.",176,{"inputs":[{"name":"qosinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",177,{"inputs":[{"name":"qosenforcementinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"has_l3_qos_enforcement","","Supports L3 Cache QoS enforcement if true.",177,{"inputs":[{"name":"qosenforcementinfo"}],"output":{"name":"bool"}}],[11,"iter","","Iterator over QoS enforcements.",177,{"inputs":[{"name":"qosenforcementinfo"}],"output":{"name":"qosenforcementiter"}}],[11,"next","","",178,{"inputs":[{"name":"qosenforcementiter"}],"output":{"name":"option"}}],[11,"fmt","","",179,{"inputs":[{"name":"qosenforcement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"capacity_mask_length","","Length of the capacity bit mask.",179,{"inputs":[{"name":"qosenforcement"}],"output":{"name":"u8"}}],[11,"allocation_unit_isolation","","Bit-granular map of isolation/contention of allocation units.",179,{"inputs":[{"name":"qosenforcement"}],"output":{"name":"u32"}}],[11,"highest_cos_number","","Highest COS number supported for this Leaf.",179,{"inputs":[{"name":"qosenforcement"}],"output":{"name":"u16"}}],[11,"has_infrequent_cos_updates","","Updates of COS should be infrequent if true.",179,{"inputs":[{"name":"qosenforcement"}],"output":{"name":"bool"}}],[11,"has_code_data_prioritization","","Is Code and Data Prioritization Technology supported?",179,{"inputs":[{"name":"qosenforcement"}],"output":{"name":"bool"}}],[11,"fmt","","",180,{"inputs":[{"name":"processortraceinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"has_rtit_cr3_match","","If true, Indicates that IA32_RTIT_CTL.CR3Filter can be set to 1, and that IA32_RTIT_CR3_MATCH MSR can be accessed.",180,{"inputs":[{"name":"processortraceinfo"}],"output":{"name":"bool"}}],[11,"has_configurable_psb_and_cycle_accurate_mode","","If true, Indicates support of Configurable PSB and Cycle-Accurate Mode.",180,{"inputs":[{"name":"processortraceinfo"}],"output":{"name":"bool"}}],[11,"has_ip_tracestop_filtering","","If true, Indicates support of IP Filtering, TraceStop filtering, and preservation of Intel PT MSRs across warm reset.",180,{"inputs":[{"name":"processortraceinfo"}],"output":{"name":"bool"}}],[11,"has_mtc_timing_packet_coefi_suppression","","If true, Indicates support of MTC timing packet and suppression of COFI-based packets.",180,{"inputs":[{"name":"processortraceinfo"}],"output":{"name":"bool"}}],[11,"has_topa","","If true, Tracing can be enabled with IA32_RTIT_CTL.ToPA = 1, hence utilizing the ToPA output scheme; IA32_RTIT_OUTPUT_BASE and IA32_RTIT_OUTPUT_MASK_PTRS MSRs can be accessed.",180,{"inputs":[{"name":"processortraceinfo"}],"output":{"name":"bool"}}],[11,"has_topa_maximum_entries","","If true, ToPA tables can hold any number of output entries, up to the maximum allowed by the MaskOrTableOffset field of IA32_RTIT_OUTPUT_MASK_PTRS.",180,{"inputs":[{"name":"processortraceinfo"}],"output":{"name":"bool"}}],[11,"has_single_range_output_scheme","","If true, Indicates support of Single-Range Output scheme.",180,{"inputs":[{"name":"processortraceinfo"}],"output":{"name":"bool"}}],[11,"has_trace_transport_subsystem","","If true, Indicates support of output to Trace Transport subsystem.",180,{"inputs":[{"name":"processortraceinfo"}],"output":{"name":"bool"}}],[11,"has_lip_with_cs_base","","If true, Generated packets which contain IP payloads have LIP values, which include the CS base component.",180,{"inputs":[{"name":"processortraceinfo"}],"output":{"name":"bool"}}],[11,"iter","","Iterator over processor trace info sub-leafs.",180,{"inputs":[{"name":"processortraceinfo"}],"output":{"name":"processortraceiter"}}],[11,"fmt","","",181,{"inputs":[{"name":"processortraceiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",181,{"inputs":[{"name":"processortraceiter"}],"output":{"name":"option"}}],[11,"fmt","","",182,{"inputs":[{"name":"processortrace"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"configurable_address_ranges","","Number of configurable Address Ranges for filtering (Bits 2:0).",182,{"inputs":[{"name":"processortrace"}],"output":{"name":"u8"}}],[11,"supported_mtc_period_encodings","","Bitmap of supported MTC period encodings (Bit 31:16).",182,{"inputs":[{"name":"processortrace"}],"output":{"name":"u16"}}],[11,"supported_cycle_threshold_value_encodings","","Bitmap of supported Cycle Threshold value encodings (Bits 15-0).",182,{"inputs":[{"name":"processortrace"}],"output":{"name":"u16"}}],[11,"supported_psb_frequency_encodings","","Bitmap of supported Configurable PSB frequency encodings (Bit 31:16)",182,{"inputs":[{"name":"processortrace"}],"output":{"name":"u16"}}],[11,"fmt","","",183,{"inputs":[{"name":"tscinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_tsc_ratio_denominator","","An unsigned integer which is the denominator of the TSC/”core crystal clock” ratio (Bits 31:0).",183,{"inputs":[{"name":"tscinfo"}],"output":{"name":"u32"}}],[11,"get_tsc_ratio_numerator","","An unsigned integer which is the numerator of the TSC/”core crystal clock” ratio (Bits 31-0).",183,{"inputs":[{"name":"tscinfo"}],"output":{"name":"u32"}}],[11,"fmt","","",184,{"inputs":[{"name":"processorfrequencyinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"processor_base_frequency","","Processor Base Frequency (in MHz).",184,{"inputs":[{"name":"processorfrequencyinfo"}],"output":{"name":"u16"}}],[11,"processor_max_frequency","","Maximum Frequency (in MHz).",184,{"inputs":[{"name":"processorfrequencyinfo"}],"output":{"name":"u16"}}],[11,"bus_frequency","","Bus (Reference) Frequency (in MHz).",184,{"inputs":[{"name":"processorfrequencyinfo"}],"output":{"name":"u16"}}],[11,"fmt","","",185,{"inputs":[{"name":"extendedfunctioninfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"l2associativity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"l2associativity"},{"name":"l2associativity"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"l2associativity"},{"name":"l2associativity"}],"output":{"name":"bool"}}],[11,"processor_brand_string","","Retrieve processor brand string.",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"option"}}],[11,"extended_signature","","Extended Processor Signature and Feature Bits.",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"option"}}],[11,"cache_line_size","","Cache Line size in bytes",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"option"}}],[11,"l2_associativity","","L2 Associativity field",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"option"}}],[11,"cache_size","","Cache size in 1K units",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"option"}}],[11,"physical_address_bits","","#Physical Address Bits",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"option"}}],[11,"linear_address_bits","","#Linear Address Bits",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"option"}}],[11,"has_invariant_tsc","","Is Invariant TSC available?",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_lahf_sahf","","Is LAHF/SAHF available in 64-bit mode?",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_lzcnt","","Is LZCNT available?",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_prefetchw","","Is PREFETCHW available?",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_syscall_sysret","","Are fast system calls available.",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_execute_disable","","Is there support for execute disable bit.",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_1gib_pages","","Is there support for 1GiB pages.",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_rdtscp","","Check support for rdtscp instruction.",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[11,"has_64bit_mode","","Check support for 64-bit mode.",185,{"inputs":[{"name":"extendedfunctioninfo"}],"output":{"name":"bool"}}],[14,"cpuid!","","Macro to choose between `cpuid1` and `cpuid2`.\nNote: This is a low-level macro to query cpuid directly.\nIf in doubt use `CpuId` instead.",null,null]],"paths":[[3,"CpuIdResult"],[3,"CacheInfo"],[3,"ExtendedState"],[4,"CacheInfoType"],[4,"CacheType"],[4,"TopologyType"],[4,"L2Associativity"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[3,"CpuId"],[3,"VendorInfo"],[3,"CacheInfoIter"],[3,"ProcessorSerial"],[3,"FeatureInfo"],[3,"CacheParametersIter"],[3,"CacheParameter"],[3,"MonitorMwaitInfo"],[3,"ThermalPowerInfo"],[3,"ExtendedFeatures"],[3,"DirectCacheAccessInfo"],[3,"PerformanceMonitoringInfo"],[3,"ExtendedTopologyIter"],[3,"ExtendedTopologyLevel"],[3,"ExtendedStateInfo"],[3,"ExtendedStateIter"],[3,"QoSInfo"],[3,"QoSEnforcementInfo"],[3,"QoSEnforcementIter"],[3,"QoSEnforcement"],[3,"ProcessorTraceInfo"],[3,"ProcessorTraceIter"],[3,"ProcessorTrace"],[3,"TscInfo"],[3,"ProcessorFrequencyInfo"],[3,"ExtendedFunctionInfo"]]};
searchIndex['rlibc'] = {"items":[[5,"memcpy","rlibc","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"memcmp","","",null,null]],"paths":[]};
searchIndex['phf'] = {"items":[[8,"PhfHash","phf","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,null],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null],[3,"Map","","An immutable map constructed at compile time.",null,null],[3,"Set","","An immutable set constructed at compile time.",null,null],[3,"OrderedMap","","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedSet","","An order-preserving immutable set constructed at compile time.",null,null],[0,"map","","An immutable map constructed at compile time.",null,null],[3,"Map","phf::map","An immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the key/value pairs in a `Map`.",null,null],[3,"Keys","","An iterator over the keys in a `Map`.",null,null],[3,"Values","","An iterator over the values in a `Map`.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",1,{"inputs":[{"name":"map"},{"name":"t"}],"output":{"name":"v"}}],[11,"is_empty","","Returns true if the `Map` is empty.",1,{"inputs":[{"name":"map"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of entries in the `Map`.",1,{"inputs":[{"name":"map"}],"output":{"name":"usize"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",1,{"inputs":[{"name":"map"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",1,{"inputs":[{"name":"map"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given\nkey.",1,{"inputs":[{"name":"map"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",1,{"inputs":[{"name":"map"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",1,{"inputs":[{"name":"map"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",1,{"inputs":[{"name":"map"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",1,{"inputs":[{"name":"map"}],"output":{"name":"values"}}],[11,"next","","",2,{"inputs":[{"name":"entries"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"entries"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[0,"set","phf","An immutable set constructed at compile time.",null,null],[3,"Set","phf::set","An immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `Set`.",null,null],[11,"fmt","","",5,{"inputs":[{"name":"set"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `Set`.",5,{"inputs":[{"name":"set"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Set` contains no elements.",5,{"inputs":[{"name":"set"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given\nkey.",5,{"inputs":[{"name":"set"},{"name":"u"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",5,{"inputs":[{"name":"set"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",5,{"inputs":[{"name":"set"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",5,{"inputs":[{"name":"set"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",5,{"inputs":[{"name":"set"},{"name":"set"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",5,{"inputs":[{"name":"set"},{"name":"set"}],"output":{"name":"bool"}}],[11,"next","","",6,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[0,"ordered_map","phf","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedMap","phf::ordered_map","An order-preserving immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the entries in a `OrderedMap`.",null,null],[3,"Keys","","An iterator over the keys in a `OrderedMap`.",null,null],[3,"Values","","An iterator over the values in a `OrderedMap`.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"orderedmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",7,{"inputs":[{"name":"orderedmap"},{"name":"t"}],"output":{"name":"v"}}],[11,"len","","Returns the number of entries in the `Map`.",7,{"inputs":[{"name":"orderedmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Map` is empty.",7,{"inputs":[{"name":"orderedmap"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value that `key` maps to.",7,{"inputs":[{"name":"orderedmap"},{"name":"t"}],"output":{"name":"option"}}],[11,"get_key","","Returns a reference to the map's internal static instance of the given\nkey.",7,{"inputs":[{"name":"orderedmap"},{"name":"t"}],"output":{"name":"option"}}],[11,"contains_key","","Determines if `key` is in the `Map`.",7,{"inputs":[{"name":"orderedmap"},{"name":"t"}],"output":{"name":"bool"}}],[11,"get_index","","Returns the index of the key within the list used to initialize\nthe ordered map.",7,{"inputs":[{"name":"orderedmap"},{"name":"t"}],"output":{"name":"option"}}],[11,"index","","Returns references to both the key and values at an index\nwithin the list used to initialize the ordered map. See `.get_index(key)`.",7,{"inputs":[{"name":"orderedmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_entry","","Like `get`, but returns both the key and the value.",7,{"inputs":[{"name":"orderedmap"},{"name":"t"}],"output":{"name":"option"}}],[11,"entries","","Returns an iterator over the key/value pairs in the map.",7,{"inputs":[{"name":"orderedmap"}],"output":{"name":"entries"}}],[11,"keys","","Returns an iterator over the keys in the map.",7,{"inputs":[{"name":"orderedmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator over the values in the map.",7,{"inputs":[{"name":"orderedmap"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"entries"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"entries"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[0,"ordered_set","phf","An order-preserving immutable set constructed at compile time.",null,null],[3,"OrderedSet","phf::ordered_set","An order-preserving immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `OrderedSet`.",null,null],[11,"fmt","","",11,{"inputs":[{"name":"orderedset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Returns the number of elements in the `OrderedSet`.",11,{"inputs":[{"name":"orderedset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `OrderedSet` contains no elements.",11,{"inputs":[{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"get_key","","Returns a reference to the set's internal static instance of the given\nkey.",11,{"inputs":[{"name":"orderedset"},{"name":"u"}],"output":{"name":"option"}}],[11,"get_index","","Returns the index of the key within the list used to initialize\nthe ordered set.",11,{"inputs":[{"name":"orderedset"},{"name":"u"}],"output":{"name":"option"}}],[11,"index","","Returns references to both the key and values at an index\nwithin the list used to initialize the ordered map. See `.get_index(key)`.",11,{"inputs":[{"name":"orderedset"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains","","Returns true if `value` is in the `Set`.",11,{"inputs":[{"name":"orderedset"},{"name":"u"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the values in the set.",11,{"inputs":[{"name":"orderedset"}],"output":{"name":"iter"}}],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",11,{"inputs":[{"name":"orderedset"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns true if `other` contains all values in `self`.",11,{"inputs":[{"name":"orderedset"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns true if `self` contains all values in `other`.",11,{"inputs":[{"name":"orderedset"},{"name":"orderedset"}],"output":{"name":"bool"}}],[11,"next","","",12,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}]],"paths":[[8,"PhfHash"],[3,"Map"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Set"],[3,"Iter"],[3,"OrderedMap"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OrderedSet"],[3,"Iter"]]};
searchIndex['phf_shared'] = {"items":[[5,"displace","phf_shared","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,{"inputs":[{"name":"phfhash"},{"name":"h"}],"output":null}],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null]],"paths":[[8,"PhfHash"]]};
searchIndex['bitflags'] = {"items":[[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex['cpuio'] = {"items":[[3,"Port","cpuio","",null,null],[5,"inb","","Read a `u8`-sized value from `port`.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u8"}}],[5,"outb","","Write a `u8`-sized value to `port`.",null,{"inputs":[{"name":"u16"},{"name":"u8"}],"output":null}],[5,"inw","","Read a `u16`-sized value from `port`.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u16"}}],[5,"outw","","Write a `u16`-sized value to `port`.",null,{"inputs":[{"name":"u16"},{"name":"u16"}],"output":null}],[5,"inl","","Read a `u32`-sized value from `port`.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"outl","","Write a `u32`-sized value to `port`.",null,{"inputs":[{"name":"u16"},{"name":"u32"}],"output":null}],[8,"InOut","","This trait is defined for any type which can be read or written over a\nport.",null,null],[10,"port_in","","Read a value from the specified port.",0,{"inputs":[{"name":"inout"},{"name":"u16"}],"output":{"name":"self"}}],[10,"port_out","","Write a value to the specified port.",0,{"inputs":[{"name":"inout"},{"name":"u16"},{"name":"self"}],"output":null}],[11,"new","","Constructs a new I/O port.",1,{"inputs":[{"name":"port"},{"name":"u16"}],"output":{"name":"port"}}],[11,"read","","Read data from the port.",1,{"inputs":[{"name":"port"}],"output":{"name":"t"}}],[11,"write","","Write data to the port.",1,{"inputs":[{"name":"port"},{"name":"t"}],"output":null}]],"paths":[[8,"InOut"],[3,"Port"]]};
searchIndex['spin'] = {"items":[[3,"Mutex","spin","This type provides MUTual EXclusion based on spinning.",null,null],[3,"MutexGuard","","A guard to which the protected data can be accessed",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","A guard to which the protected data can be read",null,null],[3,"RwLockWriteGuard","","A guard to which the protected data can be written",null,null],[11,"new","","Creates a new spinlock wrapping the supplied data.",0,{"inputs":[{"name":"mutex"},{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Locks the spinlock and returns a guard.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"mutexguard"}}],[11,"fmt","","",0,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[{"name":"mutex"}],"output":{"name":"mutex"}}],[11,"deref","","",1,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","The dropping of the MutexGuard will release the lock it was created from.",1,{"inputs":[{"name":"mutexguard"}],"output":null}],[11,"new","","Creates a new spinlock wrapping the supplied data.",2,{"inputs":[{"name":"rwlock"},{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",2,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Attempt to acquire this lock with shared read access.",2,{"inputs":[{"name":"rwlock"}],"output":{"name":"option"}}],[11,"write","","Lock this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",2,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",2,{"inputs":[{"name":"rwlock"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[{"name":"rwlock"}],"output":{"name":"rwlock"}}],[11,"deref","","",3,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",4,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",3,{"inputs":[{"name":"rwlockreadguard"}],"output":null}],[11,"drop","","",4,{"inputs":[{"name":"rwlockwriteguard"}],"output":null}]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"]]};
initSearch(searchIndex);
